// Copyright Â© 2017-2023 Trust Wallet.
//
// This file is part of Trust. The full Trust copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.
//
// This is a GENERATED FILE, changes made here WILL BE LOST.
//

extension {{name}}
    {{~#if parent_classes}}:{{/if}}{{#each parent_classes}} {{this}}{{/each}} {
    {{#each methods}}
    {{#if is_static}}public static func{{else}}public func{{/if}} {{name}} ({{#each params}}{{#unless skip_self}}{{name}}: {{type}}{{#unless @last}}, {{/unless}}{{/unless}}{{/each}}) -> {{return.type}}{{#if return.is_nullable}}?{{/if}} {
        {{#each operations}}
        {{#if this.call}}
        let {{this.call.var_name}} = {{this.call.call}}
        {{#if this.call.defer}}
        defer {
            {{this.call.defer}}
        }

        {{/if}}
        {{/if}}
        {{#if this.call_optional}}
        let ptr: UnsafeRawPointer?
        if let {{this.call_optional.var_name}} = {{this.call_optional.var_name}} {
            ptr = {{this.call_optional.call}}
        } else {
            ptr = nil
        }
        {{#if this.call_optional.defer}}
        defer {
            if let {{this.call_optional.var_name}}  = ptr {
                {{this.call_optional.defer}}
            }
        }
        let {{this.call_optional.var_name}} = ptr

        {{else}}

        {{/if}}
        {{/if}}
        {{#if this.guarded_call}}
        guard let {{this.guarded_call.var_name}} = {{this.guarded_call.call}} else {
            return nil
        }
        {{/if}}
        {{#if this.return}}
        return {{this.return.call}}
        {{/if}}
        {{/each}}
    }

    {{/each}}
    {{#each properties}}
    public var {{name}}: {{return.type}}{{#if return.is_nullable}}?{{/if}} {
        {{#each operations}}
        {{#if this.call}}
        let {{this.call.var_name}} = {{this.call.call}}
        {{#if this.call.defer}}
        defer {
            {{this.call.defer}}
        }

        {{/if}}
        {{/if}}
        {{#if this.call_optional}}
        let ptr: UnsafeRawPointer?
        if let {{this.call_optional.var_name}} = {{this.call_optional.var_name}} {
            ptr = {{this.call_optional.call}}
        } else {
            ptr = nil
        }
        {{#if this.call_optional.defer}}
        defer {
            if let {{this.call_optional.var_name}}  = ptr {
                {{this.call_optional.defer}}
            }
        }
        let {{this.call_optional.var_name}} = ptr

        {{else}}

        {{/if}}
        {{/if}}
        {{#if this.guarded_call}}
        guard let {{this.guarded_call.var_name}} = {{this.guarded_call.call}} else {
            return nil
        }
        {{/if}}
        {{#if this.return}}
        return {{this.return.call}}
        {{/if}}

        {{/each}}
    }

    {{/each}}
}
