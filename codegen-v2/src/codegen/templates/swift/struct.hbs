// Copyright Â© 2017-2023 Trust Wallet.
//
// This file is part of Trust. The full Trust copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.
//
// This is a GENERATED FILE, changes made here WILL BE LOST.
//

import Foundation

public {{#if is_class}}final class {{else}}struct {{/if}}{{name}}
    {{~#if superclasses}}: {{/if}}{{#each superclasses}}{{this}}{{#unless @last}}, {{/unless}}{{/each}} {
    {{#if init_instance}}
    let rawValue: OpaquePointer

    init(rawValue: OpaquePointer) {
        self.rawValue = rawValue
    }
    {{else}}
    init() {}
    {{/if}}

    {{#if eq_operator}}
    {{#if eq_operator.is_public}}public {{/if}}{{#if eq_operator.is_static}}static {{/if}}func == (lhs: {{name}}, rhs: {{name}}) -> Bool {
        return {{eq_operator.c_ffi_name}}(lhs.rawValue, rhs.rawValue)
    }
    {{/if}}

    {{#each inits}}
    public init{{#if is_nullable}}?{{/if}}({{#each params}}{{name}}: {{type}}{{#if is_nullable}}?{{/if}}{{#unless @last}}, {{/unless}}{{/each}}) {
        {{#each params}}
        {{#if wrap_as}}
        let {{name}} = {{wrap_as}}
        {{else}}
        let {{name}} = {{name}}
        {{/if}}
        {{#if deter_as}}
        defer {
            {{deter_as}}
        }
        {{/if}}
        {{/each}}

        // Call the underlying C function.
        let result = {{c_ffi_name}}({{#each params}}{{name}}{{#unless @last}}, {{/unless}}{{/each}})

        {{#if is_nullable}}
        // Check nullable result.
        guard let result = result else {
            return nil
        }

        {{/if}}
        self.rawValue = result
    }

    {{/each}}
    {{#each deinits}}
    deinit {
        {{name}}(self.rawValue)
    }

    {{/each}}
    {{#each methods}}
    {{#if is_static}}public static func{{else}}public func{{/if}} {{name}}({{#each params}}{{#unless skip_self}}{{name}}: {{type}}{{#if is_nullable}}?{{/if}}{{/unless}}{{#unless @last}}, {{/unless}}{{/each}}) -> {{return.type}}{{#if return.is_nullable}}?{{/if}} {
        {{#each operations}}
        {{#if this.call}}
        let {{this.call.var_name}} = {{this.call.call}}
        {{/if}}
        {{#if this.call_defer}}
        let {{this.call_defer.var_name}} = {{this.call_defer.call}}
        defer {
            {{this.call_defer.defer}}
        }
        {{/if}}
        {{#if this.guarded_call}}
        {{/if}}
        {{#if this.return}}
        return {{this.return.call}}
        {{/if}}
        {{/each}}
    }

    {{/each}}
    {{#each properties}}
    public var {{name}}: {{return.type}}{{#if return.is_nullable}}?{{/if}} {
        {{#each operations}}
        {{#if this.call}}
        let {{this.call.var_name}} = {{this.call.call}}
        {{/if}}
        {{#if this.call_defer}}
        let {{this.call_defer.var_name}} = {{this.call_defer.call}}
        defer {
            {{this.call_defer.defer}}
        }
        {{/if}}
        {{#if this.guarded_call}}
        {{/if}}
        {{#if this.return}}
        return {{this.return.call}}
        {{/if}}
        {{/each}}
    }

    {{/each}}
}
