// Copyright Â© 2017-{{current_year}} Trust Wallet.
//
// This file is part of Trust. The full Trust copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.
//
// This is a GENERATED FILE, changes made here WILL BE LOST.
//

import Foundation

{{#if is_public}}public {{/if}}{{#if is_class}}final class {{else}}struct {{/if}}{{name}}
    {{~#if superclasses}}: {{/if}}{{#each superclasses}}{{this}}{{#unless @last}}, {{/unless}}{{/each}} {
    {{#if init_instance}}
    let rawValue: OpaquePointer

    init(rawValue: OpaquePointer) {
        self.rawValue = rawValue
    }
    {{else}}
    init() {}
    {{/if}}

    {{! Equality operator, if available }}
    {{#if eq_operator}}
    public static func == (lhs: {{name}}, rhs: {{name}}) -> Bool {
        return {{eq_operator.c_ffi_name}}(lhs.rawValue, rhs.rawValue)
    }

    {{/if}}
    {{! Inits }}
    {{#each inits}}
    {{~> partial_init}}

    {{/each}}
    {{! Deinits }}
    {{#each deinits}}
    deinit {
        {{name}}(self.rawValue)
    }

    {{/each}}
    {{! Inits }}
    {{#each methods}}
    {{~> partial_func}}

    {{/each}}
    {{! Properties }}
    {{#each properties}}
    {{#if is_public}}public {{/if}}var {{name}}: {{return.type}}{{#if return.is_nullable}}?{{/if}} {
        {{#each operations}}
        {{#if this.call}}
        let {{this.call.var_name}} = {{this.call.call}}
        {{#if this.call.defer}}
        defer {
            {{this.call.defer}}
        }

        {{/if}}
        {{/if}}
        {{#if this.call_optional}}
        let ptr: UnsafeRawPointer?
        if let {{this.call_optional.var_name}} = {{this.call_optional.var_name}} {
            ptr = {{this.call_optional.call}}
        } else {
            ptr = nil
        }
        {{#if this.call_optional.defer}}
        defer {
            if let {{this.call_optional.var_name}}  = ptr {
                {{this.call_optional.defer}}
            }
        }
        {{/if}}
        let {{this.call_optional.var_name}} = ptr

        {{/if}}
        {{#if this.guarded_call}}
        guard let {{this.guarded_call.var_name}} = {{this.guarded_call.call}} else {
            return nil
        }
        {{/if}}
        {{#if this.return}}
        return {{this.return.call}}
        {{/if}}
        {{/each}}
    }
    {{#unless @last}}

    {{/unless}}
    {{/each}}
}
