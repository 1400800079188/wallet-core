package com.trustwallet.core

{{#if is_class}}
actual class {{struct_name}} private constructor (
    private val nativeHandle: Long,
) {
{{else}}
actual object {{struct_name}} {
{{/if}}
    {{#if is_class}}
    init {
        if (nativeHandle == 0L) throw IllegalArgumentException()
    }

    {{! Inits }}
    {{#each inits}}
    {{#if is_nullable}}
    @Throws(IllegalArgumentException::class)
    {{/if}}
    actual constructor({{#each params}}{{name}}: {{type}}{{#if is_nullable}}?{{/if}}{{#unless @last}}, {{/unless}}{{/each}}) : this({{return_call}}))

    {{/each}}
    {{/if}}
    {{! Methods }}
    {{#each methods}}
    @JvmName("{{name}}")
    actual external fun {{name}}({{#each params}}{{name}}: {{type}}{{#if is_nullable}}?{{/if}}{{#unless @last}}, {{/unless}}{{/each}}): {{return.type}}{{#if return.is_nullable}}?{{/if}}

    {{/each}}
    {{! Static methos in case of non-class}}
    {{#unless is_class}}
    {{#each static_methods}}
    @JvmStatic
    @JvmName("{{name}}")
    actual external fun {{name}}({{#each params}}{{name}}: {{type}}{{#if is_nullable}}?{{/if}}{{#unless @last}}, {{/unless}}{{/each}}): {{return.type}}{{#if return.is_nullable}}?{{/if}}

    {{/each}}
    {{/unless}}
    {{! Static methods are companion objects in case of class}}
    {{#if is_class}}
    actual companion object {
        @JvmStatic
        @JvmName("createFromNative")
        private fun createFromNative(nativeHandle: Long) = {{struct_name}}(nativeHandle)

        {{#each static_methods}}
        @JvmStatic
        @JvmName("{{name}}")
        actual external fun {{name}}({{#each params}}{{name}}: {{type}}{{#if is_nullable}}?{{/if}}{{#unless @last}}, {{/unless}}{{/each}}): {{return.type}}{{#if return.is_nullable}}?{{/if}}
        {{#unless @last}}

        {{/unless}}
        {{/each}}
    }

    {{/if}}
    {{! Properties }}
    {{#each properties}}
    actual val {{name}}: {{return.type}}{{#if return.is_nullable}}?{{/if}}
        @JvmName("{{name}}")
        external get
    {{#unless @last}}

    {{/unless}}
    {{/each}}
}
