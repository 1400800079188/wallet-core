{
  "../include/TrustWalletCore/TWCoinTypeConfiguration.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWCoinType.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "CoinTypeConfiguration functions"
        ]
      }
    },
    {
      "g_type": "StructDecl",
      "value": {
        "name": "TWCoinTypeConfiguration",
        "fields": [
          [
            "unused",
            {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt8T"
                }
              }
            }
          ]
        ],
        "markers": [
          {
            "g_variant": "TwExportStruct"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns stock symbol of coin",
          "/// \\param type A coin type",
          "\\return A non-null TWString stock symbol of coin",
          "\\note Caller must free returned object"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypeConfigurationGetSymbol",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "type"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns max count decimal places for minimal coin unit",
          "/// \\param type A coin type",
          "\\return Returns max count decimal places for minimal coin unit"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypeConfigurationGetDecimals",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "type"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns transaction url in blockchain explorer",
          "/// \\param type A coin type",
          "\\param transactionID A transaction identifier",
          "\\return Returns a non-null TWString transaction url in blockchain explorer"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypeConfigurationGetTransactionURL",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "type"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "transactionID"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns account url in blockchain explorer",
          "/// \\param type A coin type",
          "\\param accountID an Account identifier",
          "\\return Returns a non-null TWString account url in blockchain explorer"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypeConfigurationGetAccountURL",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "type"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "accountID"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns full name of coin in lower case",
          "/// \\param type A coin type",
          "\\return Returns a non-null TWString, full name of coin in lower case"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypeConfigurationGetID",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "type"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns full name of coin",
          "/// \\param type A coin type",
          "\\return Returns a non-null TWString, full name of coin"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypeConfigurationGetName",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "type"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWFIOAccount.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Represents a FIO Account name"
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWFIOAccount",
        "markers": [
          {
            "g_variant": "TwExportClass"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Create a FIO Account",
          "/// \\param string Account name",
          "\\note Must be deleted with \\TWFIOAccountDelete",
          "\\return Pointer to a nullable FIO Account"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWFIOAccountCreateWithString",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWFIOAccount"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Delete a FIO Account",
          "/// \\param account Pointer to a non-null FIO Account"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWFIOAccountDelete",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWFIOAccount"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "account"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the short account string representation.",
          "/// \\param account Pointer to a non-null FIO Account",
          "\\return Account non-null string representation"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWFIOAccountDescription",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWFIOAccount"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "account"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWBlockchain.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Blockchain enum type"
        ]
      }
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TwExportEnum",
        "value": "uint32_t"
      }
    },
    {
      "g_type": "EnumDecl",
      "value": {
        "name": "TWBlockchain",
        "variants": [
          [
            "TWBlockchainBitcoin",
            0
          ],
          [
            "TWBlockchainEthereum",
            1
          ],
          [
            "TWBlockchainVechain",
            3
          ],
          [
            "TWBlockchainTron",
            4
          ],
          [
            "TWBlockchainIcon",
            5
          ],
          [
            "TWBlockchainBinance",
            6
          ],
          [
            "TWBlockchainRipple",
            7
          ],
          [
            "TWBlockchainTezos",
            8
          ],
          [
            "TWBlockchainNimiq",
            9
          ],
          [
            "TWBlockchainStellar",
            10
          ],
          [
            "TWBlockchainAion",
            11
          ],
          [
            "TWBlockchainCosmos",
            12
          ],
          [
            "TWBlockchainTheta",
            13
          ],
          [
            "TWBlockchainOntology",
            14
          ],
          [
            "TWBlockchainZilliqa",
            15
          ],
          [
            "TWBlockchainIoTeX",
            16
          ],
          [
            "TWBlockchainEOS",
            17
          ],
          [
            "TWBlockchainNano",
            18
          ],
          [
            "TWBlockchainNULS",
            19
          ],
          [
            "TWBlockchainWaves",
            20
          ],
          [
            "TWBlockchainAeternity",
            21
          ],
          [
            "TWBlockchainNebulas",
            22
          ],
          [
            "TWBlockchainFIO",
            23
          ],
          [
            "TWBlockchainSolana",
            24
          ],
          [
            "TWBlockchainHarmony",
            25
          ],
          [
            "TWBlockchainNEAR",
            26
          ],
          [
            "TWBlockchainAlgorand",
            27
          ],
          [
            "TWBlockchainPolkadot",
            29
          ],
          [
            "TWBlockchainCardano",
            30
          ],
          [
            "TWBlockchainNEO",
            31
          ],
          [
            "TWBlockchainFilecoin",
            32
          ],
          [
            "TWBlockchainMultiversX",
            33
          ],
          [
            "TWBlockchainOasisNetwork",
            34
          ],
          [
            "TWBlockchainDecred",
            35
          ],
          [
            "TWBlockchainZcash",
            36
          ],
          [
            "TWBlockchainGroestlcoin",
            37
          ],
          [
            "TWBlockchainThorchain",
            38
          ],
          [
            "TWBlockchainRonin",
            39
          ],
          [
            "TWBlockchainKusama",
            40
          ],
          [
            "TWBlockchainNervos",
            41
          ],
          [
            "TWBlockchainEverscale",
            42
          ],
          [
            "TWBlockchainAptos",
            43
          ],
          [
            "TWBlockchainHedera",
            44
          ],
          [
            "TWBlockchainTheOpenNetwork",
            45
          ],
          [
            "TWBlockchainSui",
            46
          ]
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWString.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Scalar",
            "value": {
              "g_variant": "Void"
            }
          }
        },
        "name": "TWData",
        "markers": []
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Defines a resizable string.",
          "/// The implementantion of these methods should be language-specific to minimize translation",
          "overhead. For instance it should be a `jstring` for Java and an `NSString` for Swift. Create",
          "allocates memory, the delete call should be called at the end to release memory."
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Scalar",
            "value": {
              "g_variant": "Void"
            }
          }
        },
        "name": "TWString",
        "markers": []
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a TWString from a null-terminated UTF8 byte array. It must be deleted at the end.",
          "/// \\param bytes a null-terminated UTF8 byte array."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStringCreateWithUTF8Bytes",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Scalar",
                  "value": {
                    "g_variant": "Char"
                  }
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "bytes"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a string from a raw byte array and size. It must be deleted at the end.",
          "/// \\param bytes a raw byte array.",
          "\\param size the size of the byte array."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStringCreateWithRawBytes",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Scalar",
                  "value": {
                    "g_variant": "UInt8T"
                  }
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "bytes"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "size_t"
              }
            },
            "markers": [],
            "name": "size"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a hexadecimal string from a block of data. It must be deleted at the end.",
          "/// \\param data a block of data."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStringCreateWithHexData",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the string size in bytes.",
          "/// \\param string a TWString pointer."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStringSize",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Unrecognized",
              "value": "size_t"
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the byte at the provided index.",
          "/// \\param string a TWString pointer.",
          "\\param index the index of the byte."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStringGet",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "size_t"
              }
            },
            "markers": [],
            "name": "index"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the raw pointer to the string's UTF8 bytes (null-terminated).",
          "/// \\param string a TWString pointer."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStringUTF8Bytes",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Const",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Char"
                }
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Deletes a string created with a `TWStringCreate*` method and frees the memory.",
          "/// \\param string a TWString pointer."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStringDelete",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines whether two string blocks are equal.",
          "/// \\param lhs a TWString pointer.",
          "\\param rhs another TWString pointer."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStringEqual",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "lhs"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "rhs"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWAnyAddress.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWCoinType.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWFilecoinAddressType.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWPublicKey",
        "markers": [
          {
            "g_variant": "TWExternCBegin"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Represents an address in C++ for almost any blockchain."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWAnyAddress",
        "markers": [
          {
            "g_variant": "TwExportClass"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Compares two addresses for equality.",
          "/// \\param lhs The first address to compare.",
          "\\param rhs The second address to compare.",
          "\\return bool indicating the addresses are equal."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAnyAddressEqual",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWAnyAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "lhs"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWAnyAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "rhs"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines if the string is a valid Any address.",
          "/// \\param string address to validate.",
          "\\param coin coin type of the address.",
          "\\return bool indicating if the address is valid."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAnyAddressIsValid",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines if the string is a valid Any address with the given hrp.",
          "/// \\param string address to validate.",
          "\\param coin coin type of the address.",
          "\\param hrp explicit given hrp of the given address.",
          "\\return bool indicating if the address is valid."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAnyAddressIsValidBech32",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "hrp"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines if the string is a valid Any address with the given SS58 network prefix.",
          "/// \\param string address to validate.",
          "\\param coin coin type of the address.",
          "\\param ss58Prefix ss58Prefix of the given address.",
          "\\return bool indicating if the address is valid."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAnyAddressIsValidSS58",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt32T"
                }
              }
            },
            "markers": [],
            "name": "ss58Prefix"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates an address from a string representation and a coin type. Must be deleted with TWAnyAddressDelete after use.",
          "/// \\param string address to create.",
          "\\param coin coin type of the address.",
          "\\return TWAnyAddress pointer or nullptr if address and coin are invalid."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAnyAddressCreateWithString",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWAnyAddress"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates an bech32 address from a string representation, a coin type and the given hrp. Must be deleted with TWAnyAddressDelete after use.",
          "/// \\param string address to create.",
          "\\param coin coin type of the address.",
          "\\param hrp hrp of the address.",
          "\\return TWAnyAddress pointer or nullptr if address and coin are invalid."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAnyAddressCreateBech32",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "hrp"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWAnyAddress"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates an SS58 address from a string representation, a coin type and the given ss58Prefix. Must be deleted with TWAnyAddressDelete after use.",
          "/// \\param string address to create.",
          "\\param coin coin type of the address.",
          "\\param ss58Prefix ss58Prefix of the SS58 address.",
          "\\return TWAnyAddress pointer or nullptr if address and coin are invalid."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAnyAddressCreateSS58",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt32T"
                }
              }
            },
            "markers": [],
            "name": "ss58Prefix"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWAnyAddress"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates an address from a public key.",
          "/// \\param publicKey derivates the address from the public key.",
          "\\param coin coin type of the address.",
          "\\return TWAnyAddress pointer or nullptr if public key is invalid."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAnyAddressCreateWithPublicKey",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "publicKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWAnyAddress"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates an address from a public key and derivation option.",
          "/// \\param publicKey derivates the address from the public key.",
          "\\param coin coin type of the address.",
          "\\param derivation the custom derivation to use.",
          "\\return TWAnyAddress pointer or nullptr if public key is invalid."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAnyAddressCreateWithPublicKeyDerivation",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "publicKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWDerivation"
              }
            },
            "markers": [],
            "name": "derivation"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWAnyAddress"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates an bech32 address from a public key and a given hrp.",
          "/// \\param publicKey derivates the address from the public key.",
          "\\param coin coin type of the address.",
          "\\param hrp hrp of the address.",
          "\\return TWAnyAddress pointer or nullptr if public key is invalid."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAnyAddressCreateBech32WithPublicKey",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "publicKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "hrp"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWAnyAddress"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates an SS58 address from a public key and a given ss58Prefix.",
          "/// \\param publicKey derivates the address from the public key.",
          "\\param coin coin type of the address.",
          "\\param ss58Prefix ss58Prefix of the SS58 address.",
          "\\return TWAnyAddress pointer or nullptr if public key is invalid."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAnyAddressCreateSS58WithPublicKey",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "publicKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt32T"
                }
              }
            },
            "markers": [],
            "name": "ss58Prefix"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWAnyAddress"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a Filecoin address from a public key and a given address type.",
          "/// \\param publicKey derivates the address from the public key.",
          "\\param filecoinAddressType Filecoin address type.",
          "\\return TWAnyAddress pointer or nullptr if public key is invalid."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAnyAddressCreateWithPublicKeyFilecoinAddressType",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "publicKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWFilecoinAddressType"
              }
            },
            "markers": [],
            "name": "filecoinAddressType"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWAnyAddress"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Deletes an address.",
          "/// \\param address address to delete."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAnyAddressDelete",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWAnyAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the address string representation.",
          "/// \\param address address to get the string representation of."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAnyAddressDescription",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWAnyAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns coin type of address.",
          "/// \\param address address to get the coin type of."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAnyAddressCoin",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWAnyAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Enum",
              "value": "TWCoinType"
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns underlaying data (public key or key hash)",
          "/// \\param address address to get the data of."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAnyAddressData",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWAnyAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWDataVector.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "A vector of TWData byte arrays"
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWDataVector",
        "markers": [
          {
            "g_variant": "TwExportClass"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a Vector of Data.",
          "/// \\note Must be deleted with \\TWDataVectorDelete",
          "\\return a non-null Vector of Data."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataVectorCreate",
        "params": [],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWDataVector"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a Vector of Data with the given element",
          "/// \\param data A non-null valid block of data",
          "\\return A Vector of data with a single given element"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataVectorCreateWithData",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWDataVector"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Delete/Deallocate a Vector of Data",
          "/// \\param dataVector A non-null Vector of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataVectorDelete",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWDataVector"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "dataVector"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Add an element to a Vector of Data. Element is cloned",
          "/// \\param dataVector A non-null Vector of data",
          "\\param data A non-null valid block of data",
          "\\note data input parameter must be deleted on its own"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataVectorAdd",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWDataVector"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "dataVector"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Retrieve the number of elements",
          "/// \\param dataVector A non-null Vector of data",
          "\\return the size of the given vector."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataVectorSize",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWDataVector"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "dataVector"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Unrecognized",
              "value": "size_t"
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Retrieve the n-th element.",
          "/// \\param dataVector A non-null Vector of data",
          "\\param index index element of the vector to be retrieved, need to be < TWDataVectorSize",
          "\\note Returned element must be freed with \\TWDataDelete",
          "\\return A non-null block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataVectorGet",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWDataVector"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "dataVector"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "size_t"
              }
            },
            "markers": [],
            "name": "index"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWNervosProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Nervos_Proto_TransactionPlan",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Nervos_Proto_CellDep",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Nervos_Proto_OutPoint",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Nervos_Proto_CellOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Nervos_Proto_Script",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Nervos_Proto_NativeTransfer",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Nervos_Proto_SudtTransfer",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Nervos_Proto_DaoDeposit",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Nervos_Proto_DaoWithdrawPhase1",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Nervos_Proto_DaoWithdrawPhase2",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Nervos_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Nervos_Proto_Cell",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Nervos_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWTezosMessageSigner.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWPrivateKey.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWPublicKey.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Tezos message signing, verification and utilities."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWTezosMessageSigner",
        "markers": [
          {
            "g_variant": "TwExportStruct"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Implement format input as described in https://tezostaquito.io/docs/signing/",
          "/// \\param message message to format e.g: Hello, World",
          "\\param dAppUrl the app url, e.g: testUrl",
          "\\returns the formatted message as a string"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWTezosMessageSignerFormatMessage",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "message"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "url"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Implement input to payload as described in: https://tezostaquito.io/docs/signing/",
          "/// \\param message formatted message to be turned into an hex payload",
          "\\return the hexpayload of the formated message as a hex string"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWTezosMessageSignerInputToPayload",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "message"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Sign a message as described in https://tezostaquito.io/docs/signing/",
          "/// \\param privateKey: the private key used for signing",
          "\\param message: A custom message payload (hex) which is input to the signing.",
          "\\returns the signature, Hex-encoded. On invalid input empty string is returned. Returned object needs to be deleted after use."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWTezosMessageSignerSignMessage",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "privateKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "message"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Verify signature for a message as described in https://tezostaquito.io/docs/signing/",
          "/// \\param pubKey: pubKey that will verify the message from the signature",
          "\\param message: the message signed as a payload (hex)",
          "\\param signature: in Base58-encoded form.",
          "\\returns false on any invalid input (does not throw), true if the message can be verified from the signature"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWTezosMessageSignerVerifyMessage",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pubKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "message"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "signature"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWSolanaAddress.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Solana address helper functions"
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWSolanaAddress",
        "markers": [
          {
            "g_variant": "TwExportClass"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates an address from a string representation.",
          "/// \\param string Non-null pointer to a solana address string",
          "\\note Should be deleted with \\TWSolanaAddressDelete",
          "\\return Non-null pointer to a Solana address data structure"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWSolanaAddressCreateWithString",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWSolanaAddress"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Delete the given Solana address",
          "/// \\param address Non-null pointer to a Solana Address"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWSolanaAddressDelete",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWSolanaAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Derive default token address for token",
          "/// \\param address Non-null pointer to a Solana Address",
          "\\param tokenMintAddress Non-null pointer to a token mint address as a string",
          "\\return Null pointer if the Default token address for a token is not found, valid pointer otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWSolanaAddressDefaultTokenAddress",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWSolanaAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "tokenMintAddress"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the address string representation.",
          "/// \\param address Non-null pointer to a Solana Address",
          "\\return Non-null pointer to the Solana address string representation"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWSolanaAddressDescription",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWSolanaAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWMnemonic.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Mnemonic validate / lookup functions"
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWMnemonic",
        "markers": [
          {
            "g_variant": "TwExportStruct"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines whether a BIP39 English mnemonic phrase is valid.",
          "/// \\param mnemonic Non-null BIP39 english mnemonic",
          "\\return true if the mnemonic is valid, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWMnemonicIsValid",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "mnemonic"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines whether word is a valid BIP39 English mnemonic word.",
          "/// \\param word Non-null BIP39 English mnemonic word",
          "\\return true if the word is a valid BIP39 English mnemonic word, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWMnemonicIsValidWord",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "word"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Return BIP39 English words that match the given prefix. A single string is returned, with space-separated list of words.",
          "/// \\param prefix Non-null string prefix",
          "\\return Single non-null string, space-separated list of words containing BIP39 words that match the given prefix."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWMnemonicSuggest",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "prefix"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWStellarProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Stellar_Proto_Asset",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Stellar_Proto_OperationCreateAccount",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Stellar_Proto_OperationPayment",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Stellar_Proto_OperationChangeTrust",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Stellar_Proto_Claimant",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Stellar_Proto_OperationCreateClaimableBalance",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Stellar_Proto_OperationClaimClaimableBalance",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Stellar_Proto_MemoVoid",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Stellar_Proto_MemoText",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Stellar_Proto_MemoId",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Stellar_Proto_MemoHash",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Stellar_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Stellar_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWSS58AddressType.h": [
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Substrate based chains Address Type",
          "/// \\see https://github.com/paritytech/substrate/wiki/External-Address-Format-(SS58)#address-type"
        ]
      }
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TwExportEnum",
        "value": "uint8_t"
      }
    },
    {
      "g_type": "EnumDecl",
      "value": {
        "name": "TWSS58AddressType",
        "variants": [
          [
            "TWSS58AddressTypePolkadot",
            0
          ],
          [
            "TWSS58AddressTypeKusama",
            2
          ]
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWHRP.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE from \\registry.json, changes made here WILL BE LOST.",
          "#pragma once"
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Registered human-readable parts for BIP-0173",
          "/// - SeeAlso: https://github.com/satoshilabs/slips/blob/master/slip-0173.md"
        ]
      }
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TwExportEnum",
        "value": ""
      }
    },
    {
      "g_type": "EnumDecl",
      "value": {
        "name": "TWHRP",
        "variants": [
          [
            "TWHRPUnknown",
            null
          ],
          [
            "TWHRPBitcoin",
            null
          ],
          [
            "TWHRPLitecoin",
            null
          ],
          [
            "TWHRPViacoin",
            null
          ],
          [
            "TWHRPGroestlcoin",
            null
          ],
          [
            "TWHRPDigiByte",
            null
          ],
          [
            "TWHRPMonacoin",
            null
          ],
          [
            "TWHRPCosmos",
            null
          ],
          [
            "TWHRPBitcoinCash",
            null
          ],
          [
            "TWHRPBitcoinGold",
            null
          ],
          [
            "TWHRPIoTeX",
            null
          ],
          [
            "TWHRPNervos",
            null
          ],
          [
            "TWHRPZilliqa",
            null
          ],
          [
            "TWHRPTerra",
            null
          ],
          [
            "TWHRPCryptoOrg",
            null
          ],
          [
            "TWHRPKava",
            null
          ],
          [
            "TWHRPOasis",
            null
          ],
          [
            "TWHRPBluzelle",
            null
          ],
          [
            "TWHRPBandChain",
            null
          ],
          [
            "TWHRPMultiversX",
            null
          ],
          [
            "TWHRPSecret",
            null
          ],
          [
            "TWHRPAgoric",
            null
          ],
          [
            "TWHRPBinance",
            null
          ],
          [
            "TWHRPECash",
            null
          ],
          [
            "TWHRPTHORChain",
            null
          ],
          [
            "TWHRPHarmony",
            null
          ],
          [
            "TWHRPCardano",
            null
          ],
          [
            "TWHRPQtum",
            null
          ],
          [
            "TWHRPNativeInjective",
            null
          ],
          [
            "TWHRPOsmosis",
            null
          ],
          [
            "TWHRPTerraV2",
            null
          ],
          [
            "TWHRPCoreum",
            null
          ],
          [
            "TWHRPNativeCanto",
            null
          ],
          [
            "TWHRPSommelier",
            null
          ],
          [
            "TWHRPFetchAI",
            null
          ],
          [
            "TWHRPMars",
            null
          ],
          [
            "TWHRPUmee",
            null
          ],
          [
            "TWHRPQuasar",
            null
          ],
          [
            "TWHRPPersistence",
            null
          ],
          [
            "TWHRPAkash",
            null
          ],
          [
            "TWHRPNoble",
            null
          ],
          [
            "TWHRPStargaze",
            null
          ],
          [
            "TWHRPNativeEvmos",
            null
          ],
          [
            "TWHRPJuno",
            null
          ],
          [
            "TWHRPStride",
            null
          ],
          [
            "TWHRPAxelar",
            null
          ],
          [
            "TWHRPCrescent",
            null
          ],
          [
            "TWHRPKujira",
            null
          ],
          [
            "TWHRPComdex",
            null
          ],
          [
            "TWHRPNeutron",
            null
          ]
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_BITCOIN",
        "value": "bc",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_LITECOIN",
        "value": "ltc",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_VIACOIN",
        "value": "via",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_GROESTLCOIN",
        "value": "grs",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_DIGIBYTE",
        "value": "dgb",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_MONACOIN",
        "value": "mona",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_COSMOS",
        "value": "cosmos",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_BITCOINCASH",
        "value": "bitcoincash",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_BITCOINGOLD",
        "value": "btg",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_IOTEX",
        "value": "io",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_NERVOS",
        "value": "ckb",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_ZILLIQA",
        "value": "zil",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_TERRA",
        "value": "terra",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_CRYPTOORG",
        "value": "cro",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_KAVA",
        "value": "kava",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_OASIS",
        "value": "oasis",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_BLUZELLE",
        "value": "bluzelle",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_BAND",
        "value": "band",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_ELROND",
        "value": "erd",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_SECRET",
        "value": "secret",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_AGORIC",
        "value": "agoric",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_BINANCE",
        "value": "bnb",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_ECASH",
        "value": "ecash",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_THORCHAIN",
        "value": "thor",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_HARMONY",
        "value": "one",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_CARDANO",
        "value": "addr",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_QTUM",
        "value": "qc",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_NATIVEINJECTIVE",
        "value": "inj",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_OSMOSIS",
        "value": "osmo",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_TERRAV2",
        "value": "terra",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_COREUM",
        "value": "core",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_NATIVECANTO",
        "value": "canto",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_SOMMELIER",
        "value": "somm",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_FETCHAI",
        "value": "fetch",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_MARS",
        "value": "mars",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_UMEE",
        "value": "umee",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_QUASAR",
        "value": "quasar",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_PERSISTENCE",
        "value": "persistence",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_AKASH",
        "value": "akash",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_NOBLE",
        "value": "noble",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_STARGAZE",
        "value": "stars",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_NATIVEEVMOS",
        "value": "evmos",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_JUNO",
        "value": "juno",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_STRIDE",
        "value": "stride",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_AXELAR",
        "value": "axelar",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_CRESCENT",
        "value": "cre",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_KUJIRA",
        "value": "kujira",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_COMDEX",
        "value": "comdex",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "HRP_NEUTRON",
        "value": "neutron",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "stringForHRP",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWHRP"
              }
            },
            "markers": [],
            "name": "hrp"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Const",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Char"
                }
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": []
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "hrpForString",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Scalar",
                  "value": {
                    "g_variant": "Char"
                  }
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Enum",
              "value": "TWHRP"
            }
          },
          "markers": []
        },
        "markers": []
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWStellarMemoType.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Stellar memo type."
        ]
      }
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TwExportEnum",
        "value": "uint32_t"
      }
    },
    {
      "g_type": "EnumDecl",
      "value": {
        "name": "TWStellarMemoType",
        "variants": [
          [
            "TWStellarMemoTypeNone",
            0
          ],
          [
            "TWStellarMemoTypeText",
            1
          ],
          [
            "TWStellarMemoTypeId",
            2
          ],
          [
            "TWStellarMemoTypeHash",
            3
          ],
          [
            "TWStellarMemoTypeReturn",
            4
          ]
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWEOSProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_EOS_Proto_Asset",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_EOS_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_EOS_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWAlgorandProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Algorand_Proto_Transfer",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Algorand_Proto_AssetTransfer",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Algorand_Proto_AssetOptIn",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Algorand_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Algorand_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWStarkExMessageSigner.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWPrivateKey.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "StarkEx message signing and verification.",
          "/// StarkEx and some other wallets support a message signing & verification format, to create a proof (a signature)",
          "that someone has access to the private keys of a specific address."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWStarkExMessageSigner",
        "markers": [
          {
            "g_variant": "TwExportStruct"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Sign a message.",
          "/// \\param privateKey: the private key used for signing",
          "\\param message: A custom hex message which is input to the signing.",
          "\\returns the signature, Hex-encoded. On invalid input empty string is returned. Returned object needs to be deleted after use."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStarkExMessageSignerSignMessage",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "privateKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "message"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Verify signature for a message.",
          "/// \\param pubKey: pubKey that will verify and recover the message from the signature",
          "\\param message: the message signed (without prefix) in hex",
          "\\param signature: in Hex-encoded form.",
          "\\returns false on any invalid input (does not throw), true if the message can be recovered from the signature"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStarkExMessageSignerVerifyMessage",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pubKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "message"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "signature"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWBase64.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Base64 encode / decode functions"
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWBase64",
        "markers": [
          {
            "g_variant": "TwExportStruct"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Decode a Base64 input with the default alphabet (RFC4648 with '+', '/')",
          "/// \\param string Encoded input to be decoded",
          "\\return The decoded data, empty if decoding failed."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBase64Decode",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Decode a Base64 input with the alphabet safe for URL-s and filenames (RFC4648 with '-', '_')",
          "/// \\param string Encoded base64 input to be decoded",
          "\\return The decoded data, empty if decoding failed."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBase64DecodeUrl",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Encode an input to Base64 with the default alphabet (RFC4648 with '+', '/')",
          "/// \\param data Data to be encoded (raw bytes)",
          "\\return The encoded data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBase64Encode",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Encode an input to Base64 with the alphabet safe for URL-s and filenames (RFC4648 with '-', '_')",
          "/// \\param data Data to be encoded (raw bytes)",
          "\\return The encoded data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBase64EncodeUrl",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWBitcoinMessageSigner.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWPrivateKey.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Bitcoin message signing and verification.",
          "/// Bitcoin Core and some other wallets support a message signing & verification format, to create a proof (a signature)",
          "that someone has access to the private keys of a specific address.",
          "This feature currently works on old legacy addresses only."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWBitcoinMessageSigner",
        "markers": [
          {
            "g_variant": "TwExportStruct"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Sign a message.",
          "/// \\param privateKey: the private key used for signing",
          "\\param address: the address that matches the privateKey, must be a legacy address (P2PKH)",
          "\\param message: A custom message which is input to the signing.",
          "\\note Address is derived assuming compressed public key format.",
          "\\returns the signature, Base64-encoded.  On invalid input empty string is returned. Returned object needs to be deleteed after use."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinMessageSignerSignMessage",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "privateKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "message"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Verify signature for a message.",
          "/// \\param address: address to use, only legacy is supported",
          "\\param message: the message signed (without prefix)",
          "\\param signature: in Base64-encoded form.",
          "\\returns false on any invalid input (does not throw)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinMessageSignerVerifyMessage",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "message"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "signature"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWAES.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWAESPaddingMode.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "AES encryption/decryption methods."
        ]
      }
    },
    {
      "g_type": "StructDecl",
      "value": {
        "name": "TWAES",
        "fields": [
          [
            "unused",
            {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt8T"
                }
              }
            }
          ]
        ],
        "markers": [
          {
            "g_variant": "TwExportStruct"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Encrypts a block of Data using AES in Cipher Block Chaining (CBC) mode.",
          "/// \\param key encryption key Data, must be 16, 24, or 32 bytes long.",
          "\\param data Data to encrypt.",
          "\\param iv initialization vector.",
          "\\param mode padding mode.",
          "\\return encrypted Data."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAESEncryptCBC",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "iv"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWAESPaddingMode"
              }
            },
            "markers": [],
            "name": "mode"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Decrypts a block of data using AES in Cipher Block Chaining (CBC) mode.",
          "/// \\param key decryption key Data, must be 16, 24, or 32 bytes long.",
          "\\param data Data to decrypt.",
          "\\param iv initialization vector Data.",
          "\\param mode padding mode.",
          "\\return decrypted Data."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAESDecryptCBC",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "iv"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWAESPaddingMode"
              }
            },
            "markers": [],
            "name": "mode"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Encrypts a block of data using AES in Counter (CTR) mode.",
          "/// \\param key encryption key Data, must be 16, 24, or 32 bytes long.",
          "\\param data Data to encrypt.",
          "\\param iv initialization vector Data.",
          "\\return encrypted Data."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAESEncryptCTR",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "iv"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Decrypts a block of data using AES in Counter (CTR) mode.",
          "/// \\param key decryption key Data, must be 16, 24, or 32 bytes long.",
          "\\param data Data to decrypt.",
          "\\param iv initialization vector Data.",
          "\\return decrypted Data."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAESDecryptCTR",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "iv"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWBitcoinScript.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBitcoinSigHashType.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWCoinType.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWPublicKey.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Bitcoin script manipulating functions"
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWBitcoinScript",
        "markers": [
          {
            "g_variant": "TwExportClass"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates an empty script.",
          "/// \\return A pointer to the script"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptCreate",
        "params": [],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWBitcoinScript"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a script from a raw data representation.",
          "/// \\param data The data buffer",
          "\\note Must be deleted with \\TWBitcoinScriptDelete",
          "\\return A pointer to the script"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptCreateWithData",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWBitcoinScript"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a script from a raw bytes and size.",
          "/// \\param bytes The buffer",
          "\\param size The size of the buffer",
          "\\note Must be deleted with \\TWBitcoinScriptDelete",
          "\\return A pointer to the script"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptCreateWithBytes",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Scalar",
                  "value": {
                    "g_variant": "UInt8T"
                  }
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "bytes"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "size_t"
              }
            },
            "markers": [],
            "name": "size"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWBitcoinScript"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": []
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a script by copying an existing script.",
          "/// \\param script Non-null pointer to a script",
          "\\note Must be deleted with \\TWBitcoinScriptDelete",
          "\\return A pointer to the script"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptCreateCopy",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinScript"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "script"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWBitcoinScript"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Delete/Deallocate a given script.",
          "/// \\param script Non-null pointer to a script"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptDelete",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinScript"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "script"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Get size of a script",
          "/// \\param script Non-null pointer to a script",
          "\\return size of the script"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptSize",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinScript"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "script"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Unrecognized",
              "value": "size_t"
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Get data of a script",
          "/// \\param script Non-null pointer to a script",
          "\\return data of the given script"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptData",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinScript"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "script"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Return script hash of a script",
          "/// \\param script Non-null pointer to a script",
          "\\return script hash of the given script"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptScriptHash",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinScript"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "script"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines whether this is a pay-to-script-hash (P2SH) script.",
          "/// \\param script Non-null pointer to a script",
          "\\return true if this is a pay-to-script-hash (P2SH) script, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptIsPayToScriptHash",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinScript"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "script"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines whether this is a pay-to-witness-script-hash (P2WSH) script.",
          "/// \\param script Non-null pointer to a script",
          "\\return true if this is a pay-to-witness-script-hash (P2WSH) script, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptIsPayToWitnessScriptHash",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinScript"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "script"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines whether this is a pay-to-witness-public-key-hash (P2WPKH) script.",
          "/// \\param script Non-null pointer to a script",
          "\\return true if this is a pay-to-witness-public-key-hash (P2WPKH) script, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptIsPayToWitnessPublicKeyHash",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinScript"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "script"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines whether this is a witness program script.",
          "/// \\param script Non-null pointer to a script",
          "\\return true if this is a witness program script, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptIsWitnessProgram",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinScript"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "script"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines whether 2 scripts have the same content",
          "/// \\param lhs Non-null pointer to the first script",
          "\\param rhs Non-null pointer to the second script",
          "\\return true if both script have the same content"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptEqual",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinScript"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "lhs"
          },
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinScript"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "rhs"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Matches the script to a pay-to-public-key (P2PK) script.",
          "/// \\param script Non-null pointer to a script",
          "\\return The public key."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptMatchPayToPubkey",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinScript"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "script"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Matches the script to a pay-to-public-key-hash (P2PKH).",
          "/// \\param script Non-null pointer to a script",
          "\\return the key hash."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptMatchPayToPubkeyHash",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinScript"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "script"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Matches the script to a pay-to-script-hash (P2SH).",
          "/// \\param script Non-null pointer to a script",
          "\\return the script hash."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptMatchPayToScriptHash",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinScript"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "script"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Matches the script to a pay-to-witness-public-key-hash (P2WPKH).",
          "/// \\param script Non-null pointer to a script",
          "\\return the key hash."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptMatchPayToWitnessPublicKeyHash",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinScript"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "script"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Matches the script to a pay-to-witness-script-hash (P2WSH).",
          "/// \\param script Non-null pointer to a script",
          "\\return the script hash, a SHA256 of the witness script.."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptMatchPayToWitnessScriptHash",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinScript"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "script"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Encodes the script.",
          "/// \\param script Non-null pointer to a script",
          "\\return The encoded script"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptEncode",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinScript"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "script"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Builds a standard 'pay to public key' script.",
          "/// \\param pubkey Non-null pointer to a pubkey",
          "\\note Must be deleted with \\TWBitcoinScriptDelete",
          "\\return A pointer to the built script"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptBuildPayToPublicKey",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pubkey"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWBitcoinScript"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Builds a standard 'pay to public key hash' script.",
          "/// \\param hash Non-null pointer to a PublicKey hash",
          "\\note Must be deleted with \\TWBitcoinScriptDelete",
          "\\return A pointer to the built script"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptBuildPayToPublicKeyHash",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "hash"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWBitcoinScript"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Builds a standard 'pay to script hash' script.",
          "/// \\param scriptHash Non-null pointer to a script hash",
          "\\note Must be deleted with \\TWBitcoinScriptDelete",
          "\\return A pointer to the built script"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptBuildPayToScriptHash",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "scriptHash"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWBitcoinScript"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Builds a pay-to-witness-public-key-hash (P2WPKH) script..",
          "/// \\param hash Non-null pointer to a witness public key hash",
          "\\note Must be deleted with \\TWBitcoinScriptDelete",
          "\\return A pointer to the built script"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptBuildPayToWitnessPubkeyHash",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "hash"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWBitcoinScript"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Builds a pay-to-witness-script-hash (P2WSH) script.",
          "/// \\param scriptHash Non-null pointer to a script hash",
          "\\note Must be deleted with \\TWBitcoinScriptDelete",
          "\\return A pointer to the built script"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptBuildPayToWitnessScriptHash",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "scriptHash"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWBitcoinScript"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Builds a appropriate lock script for the given address..",
          "/// \\param address Non-null pointer to an address",
          "\\param coin coin type",
          "\\note Must be deleted with \\TWBitcoinScriptDelete",
          "\\return A pointer to the built script"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptLockScriptForAddress",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWBitcoinScript"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Return the default HashType for the given coin, such as TWBitcoinSigHashTypeAll.",
          "/// \\param coinType coin type",
          "\\return default HashType for the given coin"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinScriptHashTypeForCoin",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coinType"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "UInt32T"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWSegwitAddress.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWHRP.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWPublicKey",
        "markers": [
          {
            "g_variant": "TWExternCBegin"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Represents a BIP 0173 address."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWSegwitAddress",
        "markers": [
          {
            "g_variant": "TwExportClass"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Compares two addresses for equality.",
          "/// \\param lhs left non-null pointer to a Bech32 Address",
          "\\param rhs right non-null pointer to a Bech32 Address",
          "\\return true if both address are equal, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWSegwitAddressEqual",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWSegwitAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "lhs"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWSegwitAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "rhs"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines if the string is a valid Bech32 address.",
          "/// \\param string Non-null pointer to a Bech32 address as a string",
          "\\return true if the string is a valid Bech32 address, false otherwise."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWSegwitAddressIsValidString",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates an address from a string representation.",
          "/// \\param string Non-null pointer to a Bech32 address as a string",
          "\\note should be deleted with \\TWSegwitAddressDelete",
          "\\return Pointer to a Bech32 address if the string is a valid Bech32 address, null pointer otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWSegwitAddressCreateWithString",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWSegwitAddress"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a segwit-version-0 address from a public key and HRP prefix.",
          "Taproot (v>=1) is not supported by this method.",
          "/// \\param hrp HRP of the utxo coin targeted",
          "\\param publicKey Non-null pointer to the public key of the targeted coin",
          "\\note should be deleted with \\TWSegwitAddressDelete",
          "\\return Non-null pointer to the corresponding Segwit address"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWSegwitAddressCreateWithPublicKey",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWHRP"
              }
            },
            "markers": [],
            "name": "hrp"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "publicKey"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWSegwitAddress"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Delete the given Segwit address",
          "/// \\param address Non-null pointer to a Segwit address"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWSegwitAddressDelete",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWSegwitAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the address string representation.",
          "/// \\param address Non-null pointer to a Segwit Address",
          "\\return Non-null pointer to the segwit address string representation"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWSegwitAddressDescription",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWSegwitAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the human-readable part.",
          "/// \\param address Non-null pointer to a Segwit Address",
          "\\return the HRP part of the given address"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWSegwitAddressHRP",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWSegwitAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Enum",
              "value": "TWHRP"
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the human-readable part.",
          "/// \\param address Non-null pointer to a Segwit Address",
          "\\return returns the witness version of the given segwit address"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWSegwitAddressWitnessVersion",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWSegwitAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the witness program",
          "/// \\param address Non-null pointer to a Segwit Address",
          "\\return returns the witness data of the given segwit address as a non-null pointer block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWSegwitAddressWitnessProgram",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWSegwitAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWBinanceProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_Transaction",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_Signature",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_TradeOrder",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_CancelTradeOrder",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_SendOrder",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_TokenIssueOrder",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_TokenMintOrder",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_TokenBurnOrder",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_TokenFreezeOrder",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_TokenUnfreezeOrder",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_HTLTOrder",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_DepositHTLTOrder",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_ClaimHTLOrder",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_RefundHTLTOrder",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_TransferOut",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_SideChainDelegate",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_SideChainRedelegate",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_SideChainUndelegate",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_TimeLockOrder",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_TimeRelockOrder",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_TimeUnlockOrder",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Binance_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWEthereumAbiValue.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Represents Ethereum ABI value"
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWEthereumAbiValue",
        "markers": [
          {
            "g_variant": "TwExportStruct"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Encode a bool according to Ethereum ABI, into 32 bytes.  Values are padded by 0 on the left, unless specified otherwise",
          "/// \\param value a boolean value",
          "\\return Encoded value stored in a block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiValueEncodeBool",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "value"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Encode a int32 according to Ethereum ABI, into 32 bytes. Values are padded by 0 on the left, unless specified otherwise",
          "/// \\param value a int32 value",
          "\\return Encoded value stored in a block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiValueEncodeInt32",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "int32_t"
              }
            },
            "markers": [],
            "name": "value"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Encode a uint32 according to Ethereum ABI, into 32 bytes.  Values are padded by 0 on the left, unless specified otherwise",
          "/// \\param value a uint32 value",
          "\\return Encoded value stored in a block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiValueEncodeUInt32",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt32T"
                }
              }
            },
            "markers": [],
            "name": "value"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Encode a int256 according to Ethereum ABI, into 32 bytes.  Values are padded by 0 on the left, unless specified otherwise",
          "/// \\param value a int256 value stored in a block of data",
          "\\return Encoded value stored in a block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiValueEncodeInt256",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "value"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Encode an int256 according to Ethereum ABI, into 32 bytes.  Values are padded by 0 on the left, unless specified otherwise",
          "/// \\param value a int256 value stored in a block of data",
          "\\return Encoded value stored in a block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiValueEncodeUInt256",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "value"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Encode an address according to Ethereum ABI, 20 bytes of the address.",
          "/// \\param value an address value stored in a block of data",
          "\\return Encoded value stored in a block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiValueEncodeAddress",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "value"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Encode a string according to Ethereum ABI by encoding its hash.",
          "/// \\param value a string value",
          "\\return Encoded value stored in a block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiValueEncodeString",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "value"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Encode a number of bytes, up to 32 bytes, padded on the right.  Longer arrays are truncated.",
          "/// \\param value bunch of bytes",
          "\\return Encoded value stored in a block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiValueEncodeBytes",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "value"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Encode a dynamic number of bytes by encoding its hash",
          "/// \\param value bunch of bytes",
          "\\return Encoded value stored in a block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiValueEncodeBytesDyn",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "value"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Decodes input data (bytes longer than 32 will be truncated) as uint256",
          "/// \\param input Data to be decoded",
          "\\return Non-null decoded string value"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiValueDecodeUInt256",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "input"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Decode an arbitrary type, return value as string",
          "/// \\param input Data to be decoded",
          "\\param type the underlying type that need to be decoded",
          "\\return Non-null decoded string value"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiValueDecodeValue",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "input"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "type"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Decode an array of given simple types.  Return a '\\n'-separated string of elements",
          "/// \\param input Data to be decoded",
          "\\param type the underlying type that need to be decoded",
          "\\return Non-null decoded string value"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiValueDecodeArray",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "input"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "type"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWDerivationPathIndex.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Represents a derivation path index in C++ with value and hardened flag."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWDerivationPathIndex",
        "markers": [
          {
            "g_variant": "TwExportClass"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a new Index with a value and hardened flag.",
          "Must be deleted with TWDerivationPathIndexDelete after use.",
          "/// \\param value Index value",
          "\\param hardened Indicates if the Index is hardened.",
          "\\return A new Index."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDerivationPathIndexCreate",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt32T"
                }
              }
            },
            "markers": [],
            "name": "value"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "hardened"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWDerivationPathIndex"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Deletes an Index.",
          "/// \\param index Index to delete."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDerivationPathIndexDelete",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWDerivationPathIndex"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "index"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns numeric value of an Index.",
          "/// \\param index Index to get the numeric value of."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDerivationPathIndexValue",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWDerivationPathIndex"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "index"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "UInt32T"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns hardened flag of an Index.",
          "/// \\param index Index to get hardened flag.",
          "\\return true if hardened, false otherwise."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDerivationPathIndexHardened",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWDerivationPathIndex"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "index"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the string description of a derivation path index.",
          "/// \\param path Index to get the address of.",
          "\\return The string description of the derivation path index."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDerivationPathIndexDescription",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWDerivationPathIndex"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "index"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWData.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Scalar",
            "value": {
              "g_variant": "Void"
            }
          }
        },
        "name": "TWString",
        "markers": []
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Defines a resizable block of data.",
          "/// The implementantion of these methods should be language-specific to minimize translation overhead. For instance it",
          "should be a `jbyteArray` for Java and an `NSData` for Swift."
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Scalar",
            "value": {
              "g_variant": "Void"
            }
          }
        },
        "name": "TWData",
        "markers": []
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a block of data from a byte array.",
          "/// \\param bytes Non-null raw bytes buffer",
          "\\param size size of the buffer",
          "\\return Non-null filled block of data."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataCreateWithBytes",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Scalar",
                  "value": {
                    "g_variant": "UInt8T"
                  }
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "bytes"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "size_t"
              }
            },
            "markers": [],
            "name": "size"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates an uninitialized block of data with the provided size.",
          "/// \\param size size for the block of data",
          "\\return Non-null uninitialized block of data with the provided size"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataCreateWithSize",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "size_t"
              }
            },
            "markers": [],
            "name": "size"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a block of data by copying another block of data.",
          "/// \\param data buffer that need to be copied",
          "\\return Non-null filled block of data."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataCreateWithData",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a block of data from a hexadecimal string.  Odd length is invalid (intended grouping to bytes is not obvious).",
          "/// \\param hex input hex string",
          "\\return Non-null filled block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataCreateWithHexString",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "hex"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the size in bytes.",
          "/// \\param data A non-null valid block of data",
          "\\return the size of the given block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataSize",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Unrecognized",
              "value": "size_t"
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the raw pointer to the contents of data.",
          "/// \\param data A non-null valid block of data",
          "\\return the raw pointer to the contents of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataBytes",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt8T"
                }
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the byte at the provided index.",
          "/// \\param data A non-null valid block of data",
          "\\param index index of the byte that we want to fetch - index need to be < TWDataSize(data)",
          "\\return the byte at the provided index"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataGet",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "size_t"
              }
            },
            "markers": [],
            "name": "index"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "UInt8T"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Sets the byte at the provided index.",
          "/// \\param data A non-null valid block of data",
          "\\param index index of the byte that we want to set - index need to be < TWDataSize(data)",
          "\\param byte Given byte to be written in data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataSet",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "size_t"
              }
            },
            "markers": [],
            "name": "index"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt8T"
                }
              }
            },
            "markers": [],
            "name": "byte"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copies a range of bytes into the provided buffer.",
          "/// \\param data A non-null valid block of data",
          "\\param start starting index of the range - index need to be < TWDataSize(data)",
          "\\param size size of the range we want to copy - size need to be < TWDataSize(data) - start",
          "\\param output The output buffer where we want to copy the data."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataCopyBytes",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "size_t"
              }
            },
            "markers": [],
            "name": "start"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "size_t"
              }
            },
            "markers": [],
            "name": "size"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Scalar",
                  "value": {
                    "g_variant": "UInt8T"
                  }
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "output"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Replaces a range of bytes with the contents of the provided buffer.",
          "/// \\param data A non-null valid block of data",
          "\\param start starting index of the range - index need to be < TWDataSize(data)",
          "\\param size size of the range we want to replace - size need to be < TWDataSize(data) - start",
          "\\param bytes The buffer that will replace the range of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataReplaceBytes",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "size_t"
              }
            },
            "markers": [],
            "name": "start"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "size_t"
              }
            },
            "markers": [],
            "name": "size"
          },
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Scalar",
                  "value": {
                    "g_variant": "UInt8T"
                  }
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "bytes"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Appends data from a byte array.",
          "/// \\param data A non-null valid block of data",
          "\\param bytes Non-null byte array",
          "\\param size The size of the byte array"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataAppendBytes",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          },
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Scalar",
                  "value": {
                    "g_variant": "UInt8T"
                  }
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "bytes"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "size_t"
              }
            },
            "markers": [],
            "name": "size"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Appends a single byte.",
          "/// \\param data A non-null valid block of data",
          "\\param byte A single byte"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataAppendByte",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt8T"
                }
              }
            },
            "markers": [],
            "name": "byte"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Appends a block of data.",
          "/// \\param data A non-null valid block of data",
          "\\param append A non-null valid block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataAppendData",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "append"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Reverse the bytes.",
          "/// \\param data A non-null valid block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataReverse",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Sets all bytes to the given value.",
          "/// \\param data A non-null valid block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataReset",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Deletes a block of data created with a `TWDataCreate*` method.",
          "/// \\param data A non-null valid block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataDelete",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines whether two data blocks are equal.",
          "/// \\param lhs left non null block of data to be compared",
          "\\param rhs right non null block of data to be compared",
          "\\return true if both block of data are equal, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDataEqual",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "lhs"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "rhs"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWPublicKeyType.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Public key types"
        ]
      }
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TwExportEnum",
        "value": "uint32_t"
      }
    },
    {
      "g_type": "EnumDecl",
      "value": {
        "name": "TWPublicKeyType",
        "variants": [
          [
            "TWPublicKeyTypeSECP256k1",
            0
          ],
          [
            "TWPublicKeyTypeSECP256k1Extended",
            1
          ],
          [
            "TWPublicKeyTypeNIST256p1",
            2
          ],
          [
            "TWPublicKeyTypeNIST256p1Extended",
            3
          ],
          [
            "TWPublicKeyTypeED25519",
            4
          ],
          [
            "TWPublicKeyTypeED25519Blake2b",
            5
          ],
          [
            "TWPublicKeyTypeCURVE25519",
            6
          ],
          [
            "TWPublicKeyTypeED25519Cardano",
            7
          ],
          [
            "TWPublicKeyTypeStarkex",
            8
          ]
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWPrivateKey.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWCurve.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWPublicKey.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWCoinType.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Represents a private key."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWPrivateKey",
        "markers": [
          {
            "g_variant": "TwExportClass"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Unrecognized",
            "value": "size_t"
          }
        },
        "name": "TWPrivateKeySize",
        "value": "32",
        "markers": []
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Create a random private key",
          "/// \\note Should be deleted with \\TWPrivateKeyDelete",
          "\\return Non-null Private key"
        ]
      }
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TwExportStaticMethod"
      }
    },
    {
      "g_type": "Unrecognized",
      "value": "struct TWPrivateKey* _Nonnull TWPrivateKeyCreate(void);"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Create a private key with the given block of data",
          "/// \\param data a block of data",
          "\\note Should be deleted with \\TWPrivateKeyDelete",
          "\\return Nullable pointer to Private Key"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPrivateKeyCreateWithData",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPrivateKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Deep copy a given private key",
          "/// \\param key Non-null private key to be copied",
          "\\note Should be deleted with \\TWPrivateKeyDelete",
          "\\return Deep copy, Nullable pointer to Private key"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPrivateKeyCreateCopy",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPrivateKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Delete the given private key",
          "/// \\param pk Non-null pointer to private key"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPrivateKeyDelete",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pk"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines if the given private key is valid or not.",
          "/// \\param data block of data (private key bytes)",
          "\\param curve Eliptic curve of the private key",
          "\\return true if the private key is valid, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPrivateKeyIsValid",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCurve"
              }
            },
            "markers": [],
            "name": "curve"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Convert the given private key to raw-bytes block of data",
          "/// \\param pk Non-null pointer to the private key",
          "\\return Non-null block of data (raw bytes) of the given private key"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPrivateKeyData",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pk"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the public key associated with the given coinType and privateKey",
          "/// \\param pk Non-null pointer to the private key",
          "\\param coinType coinType of the given private key",
          "\\return Non-null pointer to the corresponding public key"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPrivateKeyGetPublicKey",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pk"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coinType"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPublicKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the public key associated with the given pubkeyType and privateKey",
          "/// \\param pk Non-null pointer to the private key",
          "\\param pubkeyType pubkeyType of the given private key",
          "\\return Non-null pointer to the corresponding public key"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPrivateKeyGetPublicKeyByType",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pk"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWPublicKeyType"
              }
            },
            "markers": [],
            "name": "pubkeyType"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPublicKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the Secp256k1 public key associated with the given private key",
          "/// \\param pk Non-null pointer to the private key",
          "\\param compressed if the given private key is compressed or not",
          "\\return Non-null pointer to the corresponding public key"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPrivateKeyGetPublicKeySecp256k1",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pk"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "compressed"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPublicKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the Nist256p1 public key associated with the given private key",
          "/// \\param pk Non-null pointer to the private key",
          "\\return Non-null pointer to the corresponding public key"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPrivateKeyGetPublicKeyNist256p1",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pk"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPublicKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the Ed25519 public key associated with the given private key",
          "/// \\param pk Non-null pointer to the private key",
          "\\return Non-null pointer to the corresponding public key"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPrivateKeyGetPublicKeyEd25519",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pk"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPublicKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the Ed25519Blake2b public key associated with the given private key",
          "/// \\param pk Non-null pointer to the private key",
          "\\return Non-null pointer to the corresponding public key"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPrivateKeyGetPublicKeyEd25519Blake2b",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pk"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPublicKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the Ed25519Cardano public key associated with the given private key",
          "/// \\param pk Non-null pointer to the private key",
          "\\return Non-null pointer to the corresponding public key"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPrivateKeyGetPublicKeyEd25519Cardano",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pk"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPublicKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the Curve25519 public key associated with the given private key",
          "/// \\param pk Non-null pointer to the private key",
          "\\return Non-null pointer to the corresponding public key"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPrivateKeyGetPublicKeyCurve25519",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pk"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPublicKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Computes an EC Diffie-Hellman secret in constant time",
          "Supported curves: secp256k1",
          "/// \\param pk Non-null pointer to a Private key",
          "\\param publicKey Non-null pointer to the corresponding public key",
          "\\param curve Eliptic curve",
          "\\return The corresponding shared key as a non-null block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPrivateKeyGetSharedKey",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pk"
          },
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "publicKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCurve"
              }
            },
            "markers": [],
            "name": "curve"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Signs a digest using ECDSA and given curve.",
          "/// \\param pk  Non-null pointer to a Private key",
          "\\param digest Non-null digest block of data",
          "\\param curve Eliptic curve",
          "\\return Signature as a Non-null block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPrivateKeySign",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pk"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "digest"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCurve"
              }
            },
            "markers": [],
            "name": "curve"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Signs a digest using ECDSA. The result is encoded with DER.",
          "/// \\param pk  Non-null pointer to a Private key",
          "\\param digest Non-null digest block of data",
          "\\return Signature as a Non-null block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPrivateKeySignAsDER",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pk"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "digest"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Signs a digest using ECDSA and Zilliqa schnorr signature scheme.",
          "/// \\param pk Non-null pointer to a Private key",
          "\\param message Non-null message",
          "\\return Signature as a Non-null block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPrivateKeySignZilliqaSchnorr",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pk"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "message"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWCosmosProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Cosmos_Proto_Amount",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Cosmos_Proto_Fee",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Cosmos_Proto_Height",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Cosmos_Proto_Message",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Cosmos_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Cosmos_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWHDWallet.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWCoinType.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWCurve.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWDerivation.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWDerivationPath.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWHDVersion.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWPrivateKey.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWPublicKey.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWPurpose.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Hierarchical Deterministic (HD) Wallet"
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWHDWallet",
        "markers": [
          {
            "g_variant": "TwExportClass"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a new HDWallet with a new random mnemonic with the provided strength in bits.",
          "/// \\param strength strength in bits",
          "\\param passphrase non-null passphrase",
          "\\note Null is returned on invalid strength",
          "\\note Returned object needs to be deleted with \\TWHDWalletDelete",
          "\\return Nullable TWHDWallet"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletCreate",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "strength"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "passphrase"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWHDWallet"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates an HDWallet from a valid BIP39 English mnemonic and a passphrase.",
          "/// \\param mnemonic non-null Valid BIP39 mnemonic",
          "\\param passphrase  non-null passphrase",
          "\\note Null is returned on invalid mnemonic",
          "\\note Returned object needs to be deleted with \\TWHDWalletDelete",
          "\\return Nullable TWHDWallet"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletCreateWithMnemonic",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "mnemonic"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "passphrase"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWHDWallet"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates an HDWallet from a BIP39 mnemonic, a passphrase and validation flag.",
          "/// \\param mnemonic non-null Valid BIP39 mnemonic",
          "\\param passphrase  non-null passphrase",
          "\\param check validation flag",
          "\\note Null is returned on invalid mnemonic",
          "\\note Returned object needs to be deleted with \\TWHDWalletDelete",
          "\\return Nullable TWHDWallet"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletCreateWithMnemonicCheck",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "mnemonic"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "passphrase"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "check"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWHDWallet"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates an HDWallet from entropy (corresponding to a mnemonic).",
          "/// \\param entropy Non-null entropy data (corresponding to a mnemonic)",
          "\\param passphrase non-null passphrase",
          "\\note Null is returned on invalid input",
          "\\note Returned object needs to be deleted with \\TWHDWalletDelete",
          "\\return Nullable TWHDWallet"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletCreateWithEntropy",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "entropy"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "passphrase"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWHDWallet"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Deletes a wallet.",
          "/// \\param wallet non-null TWHDWallet"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletDelete",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWHDWallet"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "wallet"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Wallet seed.",
          "/// \\param wallet non-null TWHDWallet",
          "\\return The wallet seed as a Non-null block of data."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletSeed",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWHDWallet"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "wallet"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Wallet Mnemonic",
          "/// \\param wallet non-null TWHDWallet",
          "\\return The wallet mnemonic as a non-null TWString"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletMnemonic",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWHDWallet"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "wallet"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Wallet entropy",
          "/// \\param wallet non-null TWHDWallet",
          "\\return The wallet entropy as a non-null block of data."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletEntropy",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWHDWallet"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "wallet"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns master key.",
          "/// \\param wallet non-null TWHDWallet",
          "\\param curve  a curve",
          "\\note Returned object needs to be deleted with \\TWPrivateKeyDelete",
          "\\return Non-null corresponding private key"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletGetMasterKey",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWHDWallet"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "wallet"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCurve"
              }
            },
            "markers": [],
            "name": "curve"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPrivateKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Generates the default private key for the specified coin, using default derivation.",
          "/// \\see TWHDWalletGetKey",
          "\\see TWHDWalletGetKeyDerivation",
          "\\param wallet non-null TWHDWallet",
          "\\param coin  a coin type",
          "\\note Returned object needs to be deleted with \\TWPrivateKeyDelete",
          "\\return return the default private key for the specified coin"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletGetKeyForCoin",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWHDWallet"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "wallet"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPrivateKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Generates the default address for the specified coin (without exposing intermediary private key), default derivation.",
          "/// \\see TWHDWalletGetAddressDerivation",
          "\\param wallet non-null TWHDWallet",
          "\\param coin  a coin type",
          "\\return return the default address for the specified coin as a non-null TWString"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletGetAddressForCoin",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWHDWallet"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "wallet"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Generates the default address for the specified coin and derivation (without exposing intermediary private key).",
          "/// \\see TWHDWalletGetAddressForCoin",
          "\\param wallet non-null TWHDWallet",
          "\\param coin  a coin type",
          "\\param derivation  a (custom) derivation to use",
          "\\return return the default address for the specified coin as a non-null TWString"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletGetAddressDerivation",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWHDWallet"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "wallet"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWDerivation"
              }
            },
            "markers": [],
            "name": "derivation"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Generates the private key for the specified derivation path.",
          "/// \\see TWHDWalletGetKeyForCoin",
          "\\see TWHDWalletGetKeyDerivation",
          "\\param wallet non-null TWHDWallet",
          "\\param coin a coin type",
          "\\param derivationPath  a non-null derivation path",
          "\\note Returned object needs to be deleted with \\TWPrivateKeyDelete",
          "\\return The private key for the specified derivation path/coin"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletGetKey",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWHDWallet"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "wallet"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "derivationPath"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPrivateKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Generates the private key for the specified derivation.",
          "/// \\see TWHDWalletGetKey",
          "\\see TWHDWalletGetKeyForCoin",
          "\\param wallet non-null TWHDWallet",
          "\\param coin a coin type",
          "\\param derivation a (custom) derivation to use",
          "\\note Returned object needs to be deleted with \\TWPrivateKeyDelete",
          "\\return The private key for the specified derivation path/coin"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletGetKeyDerivation",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWHDWallet"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "wallet"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWDerivation"
              }
            },
            "markers": [],
            "name": "derivation"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPrivateKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Generates the private key for the specified derivation path and curve.",
          "/// \\param wallet non-null TWHDWallet",
          "\\param curve a curve",
          "\\param derivationPath  a non-null derivation path",
          "\\note Returned object needs to be deleted with \\TWPrivateKeyDelete",
          "\\return The private key for the specified derivation path/curve"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletGetKeyByCurve",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWHDWallet"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "wallet"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCurve"
              }
            },
            "markers": [],
            "name": "curve"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "derivationPath"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPrivateKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Shortcut method to generate private key with the specified account/change/address (bip44 standard).",
          "/// \\see https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki",
          "/// \\param wallet non-null TWHDWallet",
          "\\param coin a coin type",
          "\\param account valid bip44 account",
          "\\param change valid bip44 change",
          "\\param address valid bip44 address",
          "\\note Returned object needs to be deleted with \\TWPrivateKeyDelete",
          "\\return The private key for the specified bip44 parameters"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletGetDerivedKey",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWHDWallet"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "wallet"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt32T"
                }
              }
            },
            "markers": [],
            "name": "account"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt32T"
                }
              }
            },
            "markers": [],
            "name": "change"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt32T"
                }
              }
            },
            "markers": [],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPrivateKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the extended private key (for default 0 account).",
          "/// \\param wallet non-null TWHDWallet",
          "\\param purpose a purpose",
          "\\param coin a coin type",
          "\\param version hd version",
          "\\note Returned object needs to be deleted with \\TWStringDelete",
          "\\return  Extended private key as a non-null TWString"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletGetExtendedPrivateKey",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWHDWallet"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "wallet"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWPurpose"
              }
            },
            "markers": [],
            "name": "purpose"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWHDVersion"
              }
            },
            "markers": [],
            "name": "version"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the extended public key (for default 0 account).",
          "/// \\param wallet non-null TWHDWallet",
          "\\param purpose a purpose",
          "\\param coin a coin type",
          "\\param version hd version",
          "\\note Returned object needs to be deleted with \\TWStringDelete",
          "\\return  Extended public key as a non-null TWString"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletGetExtendedPublicKey",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWHDWallet"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "wallet"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWPurpose"
              }
            },
            "markers": [],
            "name": "purpose"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWHDVersion"
              }
            },
            "markers": [],
            "name": "version"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the extended private key, for custom account.",
          "/// \\param wallet non-null TWHDWallet",
          "\\param purpose a purpose",
          "\\param coin a coin type",
          "\\param derivation a derivation",
          "\\param version an hd version",
          "\\param account valid bip44 account",
          "\\note Returned object needs to be deleted with \\TWStringDelete",
          "\\return  Extended private key as a non-null TWString"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletGetExtendedPrivateKeyAccount",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWHDWallet"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "wallet"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWPurpose"
              }
            },
            "markers": [],
            "name": "purpose"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWDerivation"
              }
            },
            "markers": [],
            "name": "derivation"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWHDVersion"
              }
            },
            "markers": [],
            "name": "version"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt32T"
                }
              }
            },
            "markers": [],
            "name": "account"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the extended public key, for custom account.",
          "/// \\param wallet non-null TWHDWallet",
          "\\param purpose a purpose",
          "\\param coin a coin type",
          "\\param derivation a derivation",
          "\\param version an hd version",
          "\\param account valid bip44 account",
          "\\note Returned object needs to be deleted with \\TWStringDelete",
          "\\return Extended public key as a non-null TWString"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletGetExtendedPublicKeyAccount",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWHDWallet"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "wallet"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWPurpose"
              }
            },
            "markers": [],
            "name": "purpose"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWDerivation"
              }
            },
            "markers": [],
            "name": "derivation"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWHDVersion"
              }
            },
            "markers": [],
            "name": "version"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt32T"
                }
              }
            },
            "markers": [],
            "name": "account"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the extended private key (for default 0 account with derivation).",
          "/// \\param wallet non-null TWHDWallet",
          "\\param purpose a purpose",
          "\\param coin a coin type",
          "\\param derivation a derivation",
          "\\param version an hd version",
          "\\note Returned object needs to be deleted with \\TWStringDelete",
          "\\return  Extended private key as a non-null TWString"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletGetExtendedPrivateKeyDerivation",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWHDWallet"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "wallet"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWPurpose"
              }
            },
            "markers": [],
            "name": "purpose"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWDerivation"
              }
            },
            "markers": [],
            "name": "derivation"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWHDVersion"
              }
            },
            "markers": [],
            "name": "version"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the extended public key (for default 0 account with derivation).",
          "/// \\param wallet non-null TWHDWallet",
          "\\param purpose a purpose",
          "\\param coin a coin type",
          "\\param derivation a derivation",
          "\\param version an hd version",
          "\\note Returned object needs to be deleted with \\TWStringDelete",
          "\\return  Extended public key as a non-null TWString"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletGetExtendedPublicKeyDerivation",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWHDWallet"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "wallet"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWPurpose"
              }
            },
            "markers": [],
            "name": "purpose"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWDerivation"
              }
            },
            "markers": [],
            "name": "derivation"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWHDVersion"
              }
            },
            "markers": [],
            "name": "version"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Computes the public key from an extended public key representation.",
          "/// \\param extended extended public key",
          "\\param coin a coin type",
          "\\param derivationPath a derivation path",
          "\\note Returned object needs to be deleted with \\TWPublicKeyDelete",
          "\\return Nullable TWPublic key"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDWalletGetPublicKeyFromExtended",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "extended"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "derivationPath"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPublicKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWTransactionCompiler.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWCoinType.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWDataVector.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Non-core transaction utility methods, like building a transaction using an external signature."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWTransactionCompiler",
        "markers": [
          {
            "g_variant": "TwExportStruct"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Builds a coin-specific SigningInput (proto object) from a simple transaction.",
          "/// \\param coin coin type.",
          "\\param from sender of the transaction.",
          "\\param to receiver of the transaction.",
          "\\param amount transaction amount in string",
          "\\param asset optional asset name, like \"BNB\"",
          "\\param memo optional memo",
          "\\param chainId optional chainId to override default",
          "\\return serialized data of the SigningInput proto object."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWTransactionCompilerBuildInput",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coinType"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "from"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "to"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "amount"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "asset"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "memo"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "chainId"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Obtains pre-signing hashes of a transaction.",
          "/// We provide a default `PreSigningOutput` in TransactionCompiler.proto. ",
          "For some special coins, such as bitcoin, we will create a custom `PreSigningOutput` object in its proto file.",
          "\\param coin coin type.",
          "\\param txInputData The serialized data of a signing input",
          "\\return serialized data of a proto object `PreSigningOutput` includes hash."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWTransactionCompilerPreImageHashes",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coinType"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "txInputData"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Compiles a complete transation with one or more external signatures.",
          "/// Puts together from transaction input and provided public keys and signatures. The signatures must match the hashes",
          "returned by TWTransactionCompilerPreImageHashes, in the same order. The publicKeyHash attached",
          "to the hashes enable identifying the private key needed for signing the hash.",
          "\\param coin coin type.",
          "\\param txInputData The serialized data of a signing input.",
          "\\param signatures signatures to compile, using TWDataVector.",
          "\\param publicKeys public keys for signers to match private keys, using TWDataVector.",
          "\\return serialized data of a proto object `SigningOutput`."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWTransactionCompilerCompileWithSignatures",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coinType"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "txInputData"
          },
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWDataVector"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "signatures"
          },
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWDataVector"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "publicKeys"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWNimiqProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Nimiq_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Nimiq_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWBase58.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Base58 encode / decode functions"
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWBase58",
        "markers": [
          {
            "g_variant": "TwExportStruct"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Encodes data as a Base58 string, including the checksum.",
          "/// \\param data The data to encode.",
          "\\return the encoded Base58 string with checksum."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBase58Encode",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Encodes data as a Base58 string, not including the checksum.",
          "/// \\param data The data to encode.",
          "\\return then encoded Base58 string without checksum."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBase58EncodeNoCheck",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Decodes a Base58 string, checking the checksum. Returns null if the string is not a valid Base58 string.",
          "/// \\param string The Base58 string to decode.",
          "\\return the decoded data, empty if the string is not a valid Base58 string with checksum."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBase58Decode",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Decodes a Base58 string, w/o checking the checksum. Returns null if the string is not a valid Base58 string.",
          "/// \\param string The Base58 string to decode.",
          "\\return the decoded data, empty if the string is not a valid Base58 string without checksum."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBase58DecodeNoCheck",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWNervosAddress.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Represents a Nervos address."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWNervosAddress",
        "markers": [
          {
            "g_variant": "TwExportClass"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Compares two addresses for equality.",
          "/// \\param lhs The first address to compare.",
          "\\param rhs The second address to compare.",
          "\\return bool indicating the addresses are equal."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWNervosAddressEqual",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWNervosAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "lhs"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWNervosAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "rhs"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines if the string is a valid Nervos address.",
          "/// \\param string string to validate.",
          "\\return bool indicating if the address is valid."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWNervosAddressIsValidString",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Initializes an address from a sring representaion.",
          "/// \\param string Bech32 string to initialize the address from.",
          "\\return TWNervosAddress pointer or nullptr if string is invalid."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWNervosAddressCreateWithString",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWNervosAddress"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Deletes a Nervos address.",
          "/// \\param address Address to delete."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWNervosAddressDelete",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWNervosAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the address string representation.",
          "/// \\param address Address to get the string representation of."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWNervosAddressDescription",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWNervosAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the Code hash",
          "/// \\param address Address to get the keyhash data of."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWNervosAddressCodeHash",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWNervosAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the address hash type",
          "/// \\param address Address to get the hash type of."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWNervosAddressHashType",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWNervosAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the address args data.",
          "/// \\param address Address to get the args data of."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWNervosAddressArgs",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWNervosAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWEthereum.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWEthereum",
        "markers": [
          {
            "g_variant": "TWExternCBegin"
          },
          {
            "g_variant": "TwExportStruct"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Generate a layer 2 eip2645 derivation path from eth address, layer, application and given index.",
          "/// \\param wallet non-null TWHDWallet",
          "\\param ethAddress non-null Ethereum address",
          "\\param layer  non-null layer 2 name (E.G starkex)",
          "\\param application non-null layer 2 application (E.G immutablex)",
          "\\param index non-null layer 2 index (E.G 1)",
          "\\return a valid eip2645 layer 2 derivation path as a string"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumEip2645GetPath",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "ethAddress"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "layer"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "application"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "index"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Generates a deployment address for a ERC-4337 compatible smart contract wallet",
          "/// \\param factoryAddress non-null address of the account factory",
          "\\param logicAddress non-null address of the wallet's logic smart contract",
          "\\param ownerAddress  non-null address of the signing key that controls the smart contract wallet",
          "\\return Ethereum resulting address"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumEip4337GetDeploymentAddress",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "factoryAddress"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "logicAddress"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "ownerAddress"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWNEOProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NEO_Proto_TransactionInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NEO_Proto_TransactionOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NEO_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NEO_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NEO_Proto_TransactionOutputPlan",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NEO_Proto_TransactionPlan",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWFIOProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_FIO_Proto_PublicAddress",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_FIO_Proto_NewFundsContent",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_FIO_Proto_Action",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_FIO_Proto_ChainParams",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_FIO_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_FIO_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWCurve.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Elliptic cruves"
        ]
      }
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TwExportEnum",
        "value": ""
      }
    },
    {
      "g_type": "EnumDecl",
      "value": {
        "name": "TWCurve",
        "variants": [
          [
            "TWCurveSECP256k1",
            null
          ],
          [
            "TWCurveED25519",
            null
          ],
          [
            "TWCurveED25519Blake2bNano",
            null
          ],
          [
            "TWCurveCurve25519",
            null
          ],
          [
            "TWCurveNIST256p1",
            null
          ],
          [
            "TWCurveED25519ExtendedCardano",
            null
          ],
          [
            "TWCurveStarkex",
            null
          ],
          [
            "TWCurveNone",
            null
          ]
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWCommonProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    }
  ],
  "../include/TrustWalletCore/TWPrivateKeyType.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Private key types, the vast majority of chains use the default, 32-byte key."
        ]
      }
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TwExportEnum",
        "value": "uint32_t"
      }
    },
    {
      "g_type": "EnumDecl",
      "value": {
        "name": "TWPrivateKeyType",
        "variants": [
          [
            "TWPrivateKeyTypeDefault",
            0
          ],
          [
            "TWPrivateKeyTypeCardano",
            1
          ]
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWAccount.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWCoinType.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWDerivation.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Represents an Account in C++ with address, coin type and public key info, an item within a keystore."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWAccount",
        "markers": [
          {
            "g_variant": "TwExportClass"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a new Account with an address, a coin type, derivation enum, derivationPath, publicKey,",
          "and extendedPublicKey. Must be deleted with TWAccountDelete after use.",
          "/// \\param address The address of the Account.",
          "\\param coin The coin type of the Account.",
          "\\param derivation The derivation of the Account.",
          "\\param derivationPath The derivation path of the Account.",
          "\\param publicKey hex encoded public key.",
          "\\param extendedPublicKey Base58 encoded extended public key.",
          "\\return A new Account."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAccountCreate",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWDerivation"
              }
            },
            "markers": [],
            "name": "derivation"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "derivationPath"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "publicKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "extendedPublicKey"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWAccount"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Deletes an account.",
          "/// \\param account Account to delete."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAccountDelete",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWAccount"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "account"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the address of an account.",
          "/// \\param account Account to get the address of."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAccountAddress",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWAccount"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "account"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Return CoinType enum of an account.",
          "/// \\param account Account to get the coin type of."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAccountCoin",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWAccount"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "account"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Enum",
              "value": "TWCoinType"
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the derivation enum of an account.",
          "/// \\param account Account to get the derivation enum of."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAccountDerivation",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWAccount"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "account"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Enum",
              "value": "TWDerivation"
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns derivationPath of an account.",
          "/// \\param account Account to get the derivation path of."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAccountDerivationPath",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWAccount"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "account"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns hex encoded publicKey of an account.",
          "/// \\param account Account to get the public key of."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAccountPublicKey",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWAccount"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "account"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns Base58 encoded extendedPublicKey of an account.",
          "/// \\param account Account to get the extended public key of."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAccountExtendedPublicKey",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWAccount"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "account"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWEthereumMessageSigner.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWPrivateKey.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWPublicKey.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Ethereum message signing and verification.",
          "/// Ethereum and some other wallets support a message signing & verification format, to create a proof (a signature)",
          "that someone has access to the private keys of a specific address."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWEthereumMessageSigner",
        "markers": [
          {
            "g_variant": "TwExportStruct"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Sign a typed message EIP-712 V4.",
          "/// \\param privateKey: the private key used for signing",
          "\\param messageJson: A custom typed data message in json",
          "\\returns the signature, Hex-encoded. On invalid input empty string is returned. Returned object needs to be deleted after use."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumMessageSignerSignTypedMessage",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "privateKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "messageJson"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Sign a typed message EIP-712 V4 with EIP-155 replay attack protection.",
          "/// \\param privateKey: the private key used for signing",
          "\\param messageJson: A custom typed data message in json",
          "\\param chainId: chainId for eip-155 protection",
          "\\returns the signature, Hex-encoded. On invalid input empty string is returned or invalid chainId error message. Returned object needs to be deleted after use."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumMessageSignerSignTypedMessageEip155",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "privateKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "messageJson"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "chainId"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Sign a message.",
          "/// \\param privateKey: the private key used for signing",
          "\\param message: A custom message which is input to the signing.",
          "\\returns the signature, Hex-encoded. On invalid input empty string is returned. Returned object needs to be deleted after use."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumMessageSignerSignMessage",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "privateKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "message"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Sign a message with Immutable X msg type.",
          "/// \\param privateKey: the private key used for signing",
          "\\param message: A custom message which is input to the signing.",
          "\\returns the signature, Hex-encoded. On invalid input empty string is returned. Returned object needs to be deleted after use."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumMessageSignerSignMessageImmutableX",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "privateKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "message"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Sign a message with Eip-155 msg type.",
          "/// \\param privateKey: the private key used for signing",
          "\\param message: A custom message which is input to the signing.",
          "\\param chainId: chainId for eip-155 protection",
          "\\returns the signature, Hex-encoded. On invalid input empty string is returned. Returned object needs to be deleted after use."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumMessageSignerSignMessageEip155",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "privateKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "message"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "chainId"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Verify signature for a message.",
          "/// \\param pubKey: pubKey that will verify and recover the message from the signature",
          "\\param message: the message signed (without prefix)",
          "\\param signature: in Hex-encoded form.",
          "\\returns false on any invalid input (does not throw), true if the message can be recovered from the signature"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumMessageSignerVerifyMessage",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pubKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "message"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "signature"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWAionProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Aion_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Aion_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWEthereumAbiFunction.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Represents Ethereum ABI function"
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWEthereumAbiFunction",
        "markers": [
          {
            "g_variant": "TwExportClass"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a function object, with the given name and empty parameter list.  It must be deleted at the end.",
          "/// \\param name function name",
          "\\return Non-null Ethereum abi function"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionCreateWithString",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "name"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWEthereumAbiFunction"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Deletes a function object created with a 'TWEthereumAbiFunctionCreateWithString' method.",
          "/// \\param fn Non-null Ethereum abi function"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionDelete",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Return the function type signature, of the form \"baz(int32,uint256)\"",
          "/// \\param fn A Non-null eth abi function",
          "\\return function type signature as a Non-null string."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionGetType",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Methods for adding parameters of the given type (input or output).",
          "For output parameters (isOutput=true) a value has to be specified, although usually not need;"
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Add a uint8 type parameter",
          "/// \\param fn A Non-null eth abi function",
          "\\param val for output parameters, value has to be specified",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the index of the parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddParamUInt8",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt8T"
                }
              }
            },
            "markers": [],
            "name": "val"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Add a uint16 type parameter",
          "/// \\param fn A Non-null eth abi function",
          "\\param val for output parameters, value has to be specified",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the index of the parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddParamUInt16",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "uint16_t"
              }
            },
            "markers": [],
            "name": "val"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Add a uint32 type parameter",
          "/// \\param fn A Non-null eth abi function",
          "\\param val for output parameters, value has to be specified",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the index of the parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddParamUInt32",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt32T"
                }
              }
            },
            "markers": [],
            "name": "val"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Add a uint64 type parameter",
          "/// \\param fn A Non-null eth abi function",
          "\\param val for output parameters, value has to be specified",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the index of the parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddParamUInt64",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "uint64_t"
              }
            },
            "markers": [],
            "name": "val"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Add a uint256 type parameter",
          "/// \\param fn A Non-null eth abi function",
          "\\param val for output parameters, value has to be specified",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the index of the parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddParamUInt256",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "val"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Add a uint(bits) type parameter",
          "/// \\param fn A Non-null eth abi function",
          "\\param val for output parameters, value has to be specified",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the index of the parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddParamUIntN",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "bits"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "val"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Add a int8 type parameter",
          "/// \\param fn A Non-null eth abi function",
          "\\param val for output parameters, value has to be specified",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the index of the parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddParamInt8",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "int8_t"
              }
            },
            "markers": [],
            "name": "val"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Add a int16 type parameter",
          "/// \\param fn A Non-null eth abi function",
          "\\param val for output parameters, value has to be specified",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the index of the parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddParamInt16",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "int16_t"
              }
            },
            "markers": [],
            "name": "val"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Add a int32 type parameter",
          "/// \\param fn A Non-null eth abi function",
          "\\param val for output parameters, value has to be specified",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the index of the parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddParamInt32",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "int32_t"
              }
            },
            "markers": [],
            "name": "val"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Add a int64 type parameter",
          "/// \\param fn A Non-null eth abi function",
          "\\param val for output parameters, value has to be specified",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the index of the parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddParamInt64",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "int64_t"
              }
            },
            "markers": [],
            "name": "val"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Add a int256 type parameter",
          "/// \\param fn A Non-null eth abi function",
          "\\param val for output parameters, value has to be specified (stored in a block of data)",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the index of the parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddParamInt256",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "val"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Add a int(bits) type parameter",
          "/// \\param fn A Non-null eth abi function",
          "\\param bits Number of bits of the integer parameter",
          "\\param val for output parameters, value has to be specified",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the index of the parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddParamIntN",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "bits"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "val"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Add a bool type parameter",
          "/// \\param fn A Non-null eth abi function",
          "\\param val for output parameters, value has to be specified",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the index of the parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddParamBool",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "val"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Add a string type parameter",
          "/// \\param fn A Non-null eth abi function",
          "\\param val for output parameters, value has to be specified",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the index of the parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddParamString",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "val"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Add an address type parameter",
          "/// \\param fn A Non-null eth abi function",
          "\\param val for output parameters, value has to be specified",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the index of the parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddParamAddress",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "val"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Add a bytes type parameter",
          "/// \\param fn A Non-null eth abi function",
          "\\param val for output parameters, value has to be specified",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the index of the parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddParamBytes",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "val"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Add a bytes[N] type parameter",
          "/// \\param fn A Non-null eth abi function",
          "\\param size fixed size of the bytes array parameter (val).",
          "\\param val for output parameters, value has to be specified",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the index of the parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddParamBytesFix",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "size_t"
              }
            },
            "markers": [],
            "name": "size"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "val"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Add a type[] type parameter",
          "/// \\param fn A Non-null eth abi function",
          "\\param val for output parameters, value has to be specified",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the index of the parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddParamArray",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Methods for accessing the value of an output or input parameter, of different types."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Get a uint8 type parameter at the given index",
          "/// \\param fn A Non-null eth abi function",
          "\\param idx index for the parameter (0-based).",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the value of the parameter."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionGetParamUInt8",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "idx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "UInt8T"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Get a uint64 type parameter at the given index",
          "/// \\param fn A Non-null eth abi function",
          "\\param idx index for the parameter (0-based).",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the value of the parameter."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionGetParamUInt64",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "idx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Unrecognized",
              "value": "uint64_t"
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Get a uint256 type parameter at the given index",
          "/// \\param fn A Non-null eth abi function",
          "\\param idx index for the parameter (0-based).",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the value of the parameter stored in a block of data."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionGetParamUInt256",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "idx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Get a bool type parameter at the given index",
          "/// \\param fn A Non-null eth abi function",
          "\\param idx index for the parameter (0-based).",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the value of the parameter."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionGetParamBool",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "idx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Get a string type parameter at the given index",
          "/// \\param fn A Non-null eth abi function",
          "\\param idx index for the parameter (0-based).",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the value of the parameter."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionGetParamString",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "idx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Get an address type parameter at the given index",
          "/// \\param fn A Non-null eth abi function",
          "\\param idx index for the parameter (0-based).",
          "\\param isOutput determines if the parameter is an input or output",
          "\\return the value of the parameter."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionGetParamAddress",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "idx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "isOutput"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Methods for adding a parameter of the given type to a top-level input parameter array.  Returns the index of the parameter (0-based).",
          "Note that nested ParamArrays are not possible through this API, could be done by using index paths like \"1/0\""
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Adding a uint8 type parameter of to the top-level input parameter array",
          "/// \\param fn A Non-null eth abi function",
          "\\param arrayIdx array index for the abi function (0-based).",
          "\\param val the value of the parameter",
          "\\return the index of the added parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddInArrayParamUInt8",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "arrayIdx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt8T"
                }
              }
            },
            "markers": [],
            "name": "val"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Adding a uint16 type parameter of to the top-level input parameter array",
          "/// \\param fn A Non-null eth abi function",
          "\\param arrayIdx array index for the abi function (0-based).",
          "\\param val the value of the parameter",
          "\\return the index of the added parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddInArrayParamUInt16",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "arrayIdx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "uint16_t"
              }
            },
            "markers": [],
            "name": "val"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Adding a uint32 type parameter of to the top-level input parameter array",
          "/// \\param fn A Non-null eth abi function",
          "\\param arrayIdx array index for the abi function (0-based).",
          "\\param val the value of the parameter",
          "\\return the index of the added parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddInArrayParamUInt32",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "arrayIdx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt32T"
                }
              }
            },
            "markers": [],
            "name": "val"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Adding a uint64 type parameter of to the top-level input parameter array",
          "/// \\param fn A Non-null eth abi function",
          "\\param arrayIdx array index for the abi function (0-based).",
          "\\param val the value of the parameter",
          "\\return the index of the added parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddInArrayParamUInt64",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "arrayIdx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "uint64_t"
              }
            },
            "markers": [],
            "name": "val"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Adding a uint256 type parameter of to the top-level input parameter array",
          "/// \\param fn A Non-null eth abi function",
          "\\param arrayIdx array index for the abi function (0-based).",
          "\\param val the value of the parameter stored in a block of data",
          "\\return the index of the added parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddInArrayParamUInt256",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "arrayIdx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "val"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Adding a uint[N] type parameter of to the top-level input parameter array",
          "/// \\param fn A Non-null eth abi function",
          "\\param bits Number of bits of the integer parameter",
          "\\param arrayIdx array index for the abi function (0-based).",
          "\\param val the value of the parameter stored in a block of data",
          "\\return the index of the added parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddInArrayParamUIntN",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "arrayIdx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "bits"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "val"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Adding a int8 type parameter of to the top-level input parameter array",
          "/// \\param fn A Non-null eth abi function",
          "\\param arrayIdx array index for the abi function (0-based).",
          "\\param val the value of the parameter",
          "\\return the index of the added parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddInArrayParamInt8",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "arrayIdx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "int8_t"
              }
            },
            "markers": [],
            "name": "val"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Adding a int16 type parameter of to the top-level input parameter array",
          "/// \\param fn A Non-null eth abi function",
          "\\param arrayIdx array index for the abi function (0-based).",
          "\\param val the value of the parameter",
          "\\return the index of the added parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddInArrayParamInt16",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "arrayIdx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "int16_t"
              }
            },
            "markers": [],
            "name": "val"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Adding a int32 type parameter of to the top-level input parameter array",
          "/// \\param fn A Non-null eth abi function",
          "\\param arrayIdx array index for the abi function (0-based).",
          "\\param val the value of the parameter",
          "\\return the index of the added parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddInArrayParamInt32",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "arrayIdx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "int32_t"
              }
            },
            "markers": [],
            "name": "val"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Adding a int64 type parameter of to the top-level input parameter array",
          "/// \\param fn A Non-null eth abi function",
          "\\param arrayIdx array index for the abi function (0-based).",
          "\\param val the value of the parameter",
          "\\return the index of the added parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddInArrayParamInt64",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "arrayIdx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "int64_t"
              }
            },
            "markers": [],
            "name": "val"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Adding a int256 type parameter of to the top-level input parameter array",
          "/// \\param fn A Non-null eth abi function",
          "\\param arrayIdx array index for the abi function (0-based).",
          "\\param val the value of the parameter stored in a block of data",
          "\\return the index of the added parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddInArrayParamInt256",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "arrayIdx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "val"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Adding a int[N] type parameter of to the top-level input parameter array",
          "/// \\param fn A Non-null eth abi function",
          "\\param bits Number of bits of the integer parameter",
          "\\param arrayIdx array index for the abi function (0-based).",
          "\\param val the value of the parameter stored in a block of data",
          "\\return the index of the added parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddInArrayParamIntN",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "arrayIdx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "bits"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "val"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Adding a bool type parameter of to the top-level input parameter array",
          "/// \\param fn A Non-null eth abi function",
          "\\param arrayIdx array index for the abi function (0-based).",
          "\\param val the value of the parameter",
          "\\return the index of the added parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddInArrayParamBool",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "arrayIdx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Bool"
                }
              }
            },
            "markers": [],
            "name": "val"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Adding a string type parameter of to the top-level input parameter array",
          "/// \\param fn A Non-null eth abi function",
          "\\param arrayIdx array index for the abi function (0-based).",
          "\\param val the value of the parameter",
          "\\return the index of the added parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddInArrayParamString",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "arrayIdx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "val"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Adding an address type parameter of to the top-level input parameter array",
          "/// \\param fn A Non-null eth abi function",
          "\\param arrayIdx array index for the abi function (0-based).",
          "\\param val the value of the parameter",
          "\\return the index of the added parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddInArrayParamAddress",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "arrayIdx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "val"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Adding a bytes type parameter of to the top-level input parameter array",
          "/// \\param fn A Non-null eth abi function",
          "\\param arrayIdx array index for the abi function (0-based).",
          "\\param val the value of the parameter",
          "\\return the index of the added parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddInArrayParamBytes",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "arrayIdx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "val"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Adding a int64 type parameter of to the top-level input parameter array",
          "/// \\param fn A Non-null eth abi function",
          "\\param arrayIdx array index for the abi function (0-based).",
          "\\param size fixed size of the bytes array parameter (val).",
          "\\param val the value of the parameter",
          "\\return the index of the added parameter (0-based)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiFunctionAddInArrayParamBytesFix",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "Int"
                }
              }
            },
            "markers": [],
            "name": "arrayIdx"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "size_t"
              }
            },
            "markers": [],
            "name": "size"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "val"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Int"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          },
          {
            "g_variant": "TwMethodDiscardableResult"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWDecredProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Decred_Proto_Transaction",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Decred_Proto_TransactionInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Decred_Proto_TransactionOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Decred_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWCardano.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Cardano helper functions"
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWCardano",
        "markers": [
          {
            "g_variant": "TwExportStruct"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Calculates the minimum ADA amount needed for a UTXO.",
          "/// \\deprecated consider using `TWCardanoOutputMinAdaAmount` instead.",
          "\\see reference https://docs.cardano.org/native-tokens/minimum-ada-value-requirement",
          "\\param tokenBundle serialized data of TW.Cardano.Proto.TokenBundle.",
          "\\return the minimum ADA amount."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCardanoMinAdaAmount",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "tokenBundle"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Unrecognized",
              "value": "uint64_t"
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          },
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Calculates the minimum ADA amount needed for an output.",
          "/// \\see reference https://docs.cardano.org/native-tokens/minimum-ada-value-requirement",
          "\\param toAddress valid destination address, as string.",
          "\\param tokenBundle serialized data of TW.Cardano.Proto.TokenBundle.",
          "\\param coinsPerUtxoByte cost per one byte of a serialized UTXO.",
          "\\return the minimum ADA amount."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCardanoOutputMinAdaAmount",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "toAddress"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "tokenBundle"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "uint64_t"
              }
            },
            "markers": [],
            "name": "coinsPerUtxoByte"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Unrecognized",
              "value": "uint64_t"
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          },
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Return the staking address associated to (contained in) this address. Must be a Base address.",
          "Empty string is returned on error. Result must be freed.",
          "\\param baseAddress A valid base address, as string.",
          "\\return the associated staking (reward) address, as string, or empty string on error."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCardanoGetStakingAddress",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "baseAddress"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          },
          {
            "g_variant": "TWVisibilityDefault"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWHederaProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Hedera_Proto_Timestamp",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Hedera_Proto_TransactionID",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Hedera_Proto_TransferMessage",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Hedera_Proto_TransactionBody",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Hedera_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Hedera_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWStoredKeyEncryptionLevel.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Preset encryption parameter with different security strength, for key store"
        ]
      }
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TwExportEnum",
        "value": "uint32_t"
      }
    },
    {
      "g_type": "EnumDecl",
      "value": {
        "name": "TWStoredKeyEncryptionLevel",
        "variants": [
          [
            "TWStoredKeyEncryptionLevelDefault",
            0
          ],
          [
            "TWStoredKeyEncryptionLevelMinimal",
            1
          ],
          [
            "TWStoredKeyEncryptionLevelWeak",
            2
          ],
          [
            "TWStoredKeyEncryptionLevelStandard",
            3
          ]
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWBitcoinSigHashType.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Bitcoin SIGHASH type."
        ]
      }
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TwExportEnum",
        "value": "uint32_t"
      }
    },
    {
      "g_type": "EnumDecl",
      "value": {
        "name": "TWBitcoinSigHashType",
        "variants": [
          [
            "TWBitcoinSigHashTypeAll",
            1
          ],
          [
            "TWBitcoinSigHashTypeNone",
            2
          ],
          [
            "TWBitcoinSigHashTypeSingle",
            3
          ],
          [
            "TWBitcoinSigHashTypeFork",
            64
          ],
          [
            "TWBitcoinSigHashTypeForkBTG",
            20288
          ],
          [
            "TWBitcoinSigHashTypeAnyoneCanPay",
            128
          ]
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines if the given sig hash is single",
          "/// \\param type sig hash type",
          "\\return true if the sigh hash type is single, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinSigHashTypeIsSingle",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWBitcoinSigHashType"
              }
            },
            "markers": [],
            "name": "type"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines if the given sig hash is none",
          "/// \\param type sig hash type",
          "\\return true if the sigh hash type is none, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinSigHashTypeIsNone",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWBitcoinSigHashType"
              }
            },
            "markers": [],
            "name": "type"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWNEARProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NEAR_Proto_PublicKey",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NEAR_Proto_FunctionCallPermission",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NEAR_Proto_FullAccessPermission",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NEAR_Proto_AccessKey",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NEAR_Proto_CreateAccount",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NEAR_Proto_DeployContract",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NEAR_Proto_FunctionCall",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NEAR_Proto_Transfer",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NEAR_Proto_Stake",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NEAR_Proto_AddKey",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NEAR_Proto_DeleteKey",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NEAR_Proto_DeleteAccount",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NEAR_Proto_Action",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NEAR_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NEAR_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWEthereumChainID.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE from \\registry.json, changes made here WILL BE LOST.",
          "#pragma once"
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Chain identifiers for Ethereum-based blockchains, for convenience. Recommended to use the dynamic CoinType.ChainId() instead.",
          "See also TWChainId."
        ]
      }
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TwExportEnum",
        "value": "uint32_t"
      }
    },
    {
      "g_type": "EnumDecl",
      "value": {
        "name": "TWEthereumChainID",
        "variants": [
          [
            "TWEthereumChainIDEthereum",
            1
          ],
          [
            "TWEthereumChainIDClassic",
            61
          ],
          [
            "TWEthereumChainIDPoa",
            99
          ],
          [
            "TWEthereumChainIDVechain",
            74
          ],
          [
            "TWEthereumChainIDCallisto",
            820
          ],
          [
            "TWEthereumChainIDTomochain",
            88
          ],
          [
            "TWEthereumChainIDPolygon",
            137
          ],
          [
            "TWEthereumChainIDOkc",
            66
          ],
          [
            "TWEthereumChainIDThundertoken",
            108
          ],
          [
            "TWEthereumChainIDGochain",
            60
          ],
          [
            "TWEthereumChainIDMeter",
            82
          ],
          [
            "TWEthereumChainIDCelo",
            42220
          ],
          [
            "TWEthereumChainIDWanchain",
            888
          ],
          [
            "TWEthereumChainIDCronos",
            25
          ],
          [
            "TWEthereumChainIDOptimism",
            10
          ],
          [
            "TWEthereumChainIDXdai",
            100
          ],
          [
            "TWEthereumChainIDSmartbch",
            10000
          ],
          [
            "TWEthereumChainIDFantom",
            250
          ],
          [
            "TWEthereumChainIDBoba",
            288
          ],
          [
            "TWEthereumChainIDKcc",
            321
          ],
          [
            "TWEthereumChainIDZksync",
            324
          ],
          [
            "TWEthereumChainIDHeco",
            128
          ],
          [
            "TWEthereumChainIDMetis",
            1088
          ],
          [
            "TWEthereumChainIDPolygonzkevm",
            1101
          ],
          [
            "TWEthereumChainIDMoonbeam",
            1284
          ],
          [
            "TWEthereumChainIDMoonriver",
            1285
          ],
          [
            "TWEthereumChainIDRonin",
            2020
          ],
          [
            "TWEthereumChainIDKavaevm",
            2222
          ],
          [
            "TWEthereumChainIDIotexevm",
            4689
          ],
          [
            "TWEthereumChainIDKlaytn",
            8217
          ],
          [
            "TWEthereumChainIDAvalanchec",
            43114
          ],
          [
            "TWEthereumChainIDEvmos",
            9001
          ],
          [
            "TWEthereumChainIDArbitrum",
            42161
          ],
          [
            "TWEthereumChainIDSmartchain",
            56
          ],
          [
            "TWEthereumChainIDAurora",
            1313161554
          ]
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWThetaProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Theta_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Theta_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWTronMessageSigner.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWPrivateKey.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWPublicKey.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Tron message signing and verification.",
          "/// Tron and some other wallets support a message signing & verification format, to create a proof (a signature)",
          "that someone has access to the private keys of a specific address."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWTronMessageSigner",
        "markers": [
          {
            "g_variant": "TwExportStruct"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Sign a message.",
          "/// \\param privateKey: the private key used for signing",
          "\\param message: A custom message which is input to the signing.",
          "\\returns the signature, Hex-encoded. On invalid input empty string is returned. Returned object needs to be deleted after use."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWTronMessageSignerSignMessage",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "privateKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "message"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Verify signature for a message.",
          "/// \\param pubKey: pubKey that will verify and recover the message from the signature",
          "\\param message: the message signed (without prefix)",
          "\\param signature: in Hex-encoded form.",
          "\\returns false on any invalid input (does not throw), true if the message can be recovered from the signature"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWTronMessageSignerVerifyMessage",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pubKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "message"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "signature"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWStellarVersionByte.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Stellar address version byte."
        ]
      }
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TwExportEnum",
        "value": "uint16_t"
      }
    },
    {
      "g_type": "EnumDecl",
      "value": {
        "name": "TWStellarVersionByte",
        "variants": [
          [
            "TWStellarVersionByteAccountID",
            48
          ],
          [
            "TWStellarVersionByteSeed",
            192
          ],
          [
            "TWStellarVersionBytePreAuthTX",
            200
          ],
          [
            "TWStellarVersionByteSHA256Hash",
            280
          ]
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWEverscaleProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Everscale_Proto_Transfer",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Everscale_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Everscale_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWTHORChainSwapProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_THORChainSwap_Proto_Error",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_THORChainSwap_Proto_Asset",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_THORChainSwap_Proto_SwapInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_THORChainSwap_Proto_SwapOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWFilecoinProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Filecoin_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Filecoin_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWDerivation.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE from \\registry.json, changes made here WILL BE LOST.",
          "#pragma once"
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Non-default coin address derivation names (default, unnamed derivations are not included)."
        ]
      }
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TwExportEnum",
        "value": ""
      }
    },
    {
      "g_type": "EnumDecl",
      "value": {
        "name": "TWDerivation",
        "variants": [
          [
            "TWDerivationDefault",
            0
          ],
          [
            "TWDerivationCustom",
            1
          ],
          [
            "TWDerivationBitcoinSegwit",
            2
          ],
          [
            "TWDerivationBitcoinLegacy",
            3
          ],
          [
            "TWDerivationBitcoinTestnet",
            4
          ],
          [
            "TWDerivationLitecoinLegacy",
            5
          ],
          [
            "TWDerivationSolanaSolana",
            6
          ]
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWAESPaddingMode.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Padding mode used in AES encryption."
        ]
      }
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TwExportEnum",
        "value": "uint32_t"
      }
    },
    {
      "g_type": "EnumDecl",
      "value": {
        "name": "TWAESPaddingMode",
        "variants": [
          [
            "TWAESPaddingModeZero",
            0
          ],
          [
            "TWAESPaddingModePKCS7",
            1
          ]
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWAnySigner.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWCoinType.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Represents a signer to sign transactions for any blockchain."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWAnySigner",
        "markers": []
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Signs a transaction specified by the signing input and coin type.",
          "/// \\param input The serialized data of a signing input (e.g. TW.Bitcoin.Proto.SigningInput).",
          "\\param coin The given coin type to sign the transaction for.",
          "\\return The serialized data of a `SigningOutput` proto object. (e.g. TW.Bitcoin.Proto.SigningOutput)."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAnySignerSign",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "input"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Extern",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": []
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Signs a transaction specified by the JSON representation of signing input, coin type and a private key, returning the JSON representation of the signing output.",
          "/// \\param json JSON representation of a signing input",
          "\\param key The private key to sign with.",
          "\\param coin The given coin type to sign the transaction for.",
          "\\return The JSON representation of a `SigningOutput` proto object."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAnySignerSignJSON",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "json"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Extern",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": []
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Check if AnySigner supports signing JSON representation of signing input.",
          "/// \\param coin The given coin type to sign the transaction for.",
          "\\return true if AnySigner supports signing JSON representation of signing input for a given coin."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAnySignerSupportsJSON",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Extern",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": []
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Plans a transaction (for UTXO chains only).",
          "/// \\param input The serialized data of a signing input",
          "\\param coin The given coin type to plan the transaction for.",
          "\\return The serialized data of a `TransactionPlan` proto object."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWAnySignerPlan",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "input"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Extern",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": []
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWTheOpenNetworkProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_TheOpenNetwork_Proto_Transfer",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_TheOpenNetwork_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_TheOpenNetwork_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWRippleProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Ripple_Proto_CurrencyAmount",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Ripple_Proto_OperationTrustSet",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Ripple_Proto_OperationPayment",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Ripple_Proto_OperationNFTokenBurn",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Ripple_Proto_OperationNFTokenCreateOffer",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Ripple_Proto_OperationNFTokenAcceptOffer",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Ripple_Proto_OperationNFTokenCancelOffer",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Ripple_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Ripple_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWEthereumAbi.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Wrapper class for Ethereum ABI encoding & decoding."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWEthereumAbiFunction",
        "markers": []
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWEthereumAbi",
        "markers": [
          {
            "g_variant": "TwExportStruct"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Encode function to Eth ABI binary",
          "/// \\param fn Non-null Eth abi function",
          "\\return Non-null encoded block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiEncode",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Decode function output from Eth ABI binary, fill output parameters",
          "/// \\param[in] fn Non-null Eth abi function",
          "\\param[out] encoded Non-null block of data",
          "\\return true if encoded have been filled correctly, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiDecodeOutput",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWEthereumAbiFunction"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "fn"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "encoded"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Decode function call data to human readable json format, according to input abi json",
          "/// \\param data Non-null block of data",
          "\\param abi Non-null string",
          "\\return Non-null json string function call data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiDecodeCall",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "abi"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Compute the hash of a struct, used for signing, according to EIP712 (\"v4\").",
          "Input is a Json object (as string), with following fields:",
          "- types: map of used struct types (see makeTypes())",
          "- primaryType: the type of the message (string)",
          "- domain: EIP712 domain specifier values",
          "- message: the message (object).",
          "Throws on error.",
          "Example input:",
          "R\"({",
          "\"types\": {",
          "\"EIP712Domain\": [",
          "{\"name\": \"name\", \"type\": \"string\"},",
          "{\"name\": \"version\", \"type\": \"string\"},",
          "{\"name\": \"chainId\", \"type\": \"uint256\"},",
          "{\"name\": \"verifyingContract\", \"type\": \"address\"}",
          "],",
          "\"Person\": [",
          "{\"name\": \"name\", \"type\": \"string\"},",
          "{\"name\": \"wallet\", \"type\": \"address\"}",
          "]",
          "},",
          "\"primaryType\": \"Person\",",
          "\"domain\": {",
          "\"name\": \"Ether Person\",",
          "\"version\": \"1\",",
          "\"chainId\": 1,",
          "\"verifyingContract\": \"0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC\"",
          "},",
          "\"message\": {",
          "\"name\": \"Cow\",",
          "\"wallet\": \"CD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826\"",
          "}",
          "})\");",
          "On error, empty Data is returned.",
          "Returned data must be deleted (hint: use WRAPD() macro).",
          "/// \\param messageJson Non-null json abi input",
          "\\return Non-null block of data, encoded abi input"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWEthereumAbiEncodeTyped",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "messageJson"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWFilecoinAddressType.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Filecoin address type."
        ]
      }
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TwExportEnum",
        "value": "uint32_t"
      }
    },
    {
      "g_type": "EnumDecl",
      "value": {
        "name": "TWFilecoinAddressType",
        "variants": [
          [
            "TWFilecoinAddressTypeDefault",
            0
          ],
          [
            "TWFilecoinAddressTypeDelegated",
            1
          ]
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWPBKDF2.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Password-Based Key Derivation Function 2"
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWPBKDF2",
        "markers": [
          {
            "g_variant": "TwExportStruct"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Derives a key from a password and a salt using PBKDF2 + Sha256.",
          "/// \\param password is the master password from which a derived key is generated",
          "\\param salt is a sequence of bits, known as a cryptographic salt",
          "\\param iterations is the number of iterations desired",
          "\\param dkLen is the desired bit-length of the derived key",
          "\\return the derived key data."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPBKDF2HmacSha256",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "password"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "salt"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt32T"
                }
              }
            },
            "markers": [],
            "name": "iterations"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt32T"
                }
              }
            },
            "markers": [],
            "name": "dkLen"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Derives a key from a password and a salt using PBKDF2 + Sha512.",
          "/// \\param password is the master password from which a derived key is generated",
          "\\param salt is a sequence of bits, known as a cryptographic salt",
          "\\param iterations is the number of iterations desired",
          "\\param dkLen is the desired bit-length of the derived key",
          "\\return the derived key data."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPBKDF2HmacSha512",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "password"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "salt"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt32T"
                }
              }
            },
            "markers": [],
            "name": "iterations"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt32T"
                }
              }
            },
            "markers": [],
            "name": "dkLen"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWFilecoinAddressConverter.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Filecoin-Ethereum address converter."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWFilecoinAddressConverter",
        "markers": [
          {
            "g_variant": "TwExportStruct"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Converts a Filecoin address to Ethereum.",
          "/// \\param filecoinAddress: a Filecoin address.",
          "\\returns the Ethereum address. On invalid input empty string is returned. Returned object needs to be deleted after use."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWFilecoinAddressConverterConvertToEthereum",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "filecoinAddress"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Converts an Ethereum address to Filecoin.",
          "/// \\param ethAddress: an Ethereum address.",
          "\\returns the Filecoin address. On invalid input empty string is returned. Returned object needs to be deleted after use."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWFilecoinAddressConverterConvertFromEthereum",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "ethAddress"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWHDVersion.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Registered HD version bytes",
          "/// \\see https://github.com/satoshilabs/slips/blob/master/slip-0132.md"
        ]
      }
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TwExportEnum",
        "value": "uint32_t"
      }
    },
    {
      "g_type": "EnumDecl",
      "value": {
        "name": "TWHDVersion",
        "variants": [
          [
            "TWHDVersionNone",
            0
          ],
          [
            "TWHDVersionXPUB",
            76067358
          ],
          [
            "TWHDVersionXPRV",
            76066276
          ],
          [
            "TWHDVersionYPUB",
            77429938
          ],
          [
            "TWHDVersionYPRV",
            77428856
          ],
          [
            "TWHDVersionZPUB",
            78792518
          ],
          [
            "TWHDVersionZPRV",
            78791436
          ],
          [
            "TWHDVersionLTUB",
            27108450
          ],
          [
            "TWHDVersionLTPV",
            27106558
          ],
          [
            "TWHDVersionMTUB",
            28471030
          ],
          [
            "TWHDVersionMTPV",
            28469138
          ],
          [
            "TWHDVersionDPUB",
            50178342
          ],
          [
            "TWHDVersionDPRV",
            50177256
          ],
          [
            "TWHDVersionDGUB",
            49990397
          ],
          [
            "TWHDVersionDGPV",
            49988504
          ]
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determine if the HD Version is public",
          "/// \\param version HD version",
          "\\return true if the version is public, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDVersionIsPublic",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWHDVersion"
              }
            },
            "markers": [],
            "name": "version"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determine if the HD Version is private",
          "/// \\param version HD version",
          "\\return true if the version is private, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHDVersionIsPrivate",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWHDVersion"
              }
            },
            "markers": [],
            "name": "version"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWTransactionCompilerProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_TxCompiler_Proto_PreSigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWZilliqaProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Zilliqa_Proto_Transaction",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Zilliqa_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Zilliqa_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWNebulasProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Nebulas_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Nebulas_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Nebulas_Proto_Data",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Nebulas_Proto_RawTransaction",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWBitcoinAddress.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWPublicKey",
        "markers": [
          {
            "g_variant": "TWExternCBegin"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Represents a legacy Bitcoin address in C++."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWBitcoinAddress",
        "markers": [
          {
            "g_variant": "TwExportClass"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Compares two addresses for equality.",
          "/// \\param lhs The first address to compare.",
          "\\param rhs The second address to compare.",
          "\\return bool indicating the addresses are equal."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinAddressEqual",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "lhs"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "rhs"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines if the data is a valid Bitcoin address.",
          "/// \\param data data to validate.",
          "\\return bool indicating if the address data is valid."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinAddressIsValid",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines if the string is a valid Bitcoin address.",
          "/// \\param string string to validate.",
          "\\return bool indicating if the address string is valid."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinAddressIsValidString",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Initializes an address from a Base58 sring. Must be deleted with TWBitcoinAddressDelete after use.",
          "/// \\param string Base58 string to initialize the address from.",
          "\\return TWBitcoinAddress pointer or nullptr if string is invalid."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinAddressCreateWithString",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWBitcoinAddress"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Initializes an address from raw data.",
          "/// \\param data Raw data to initialize the address from. Must be deleted with TWBitcoinAddressDelete after use.",
          "\\return TWBitcoinAddress pointer or nullptr if data is invalid."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinAddressCreateWithData",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWBitcoinAddress"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Initializes an address from a public key and a prefix byte.",
          "/// \\param publicKey Public key to initialize the address from.",
          "\\param prefix Prefix byte (p2pkh, p2sh, etc).",
          "\\return TWBitcoinAddress pointer or nullptr if public key is invalid."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinAddressCreateWithPublicKey",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "publicKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt8T"
                }
              }
            },
            "markers": [],
            "name": "prefix"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWBitcoinAddress"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Deletes a legacy Bitcoin address.",
          "/// \\param address Address to delete."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinAddressDelete",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the address in Base58 string representation.",
          "/// \\param address Address to get the string representation of."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinAddressDescription",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the address prefix.",
          "/// \\param address Address to get the prefix of."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinAddressPrefix",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "UInt8T"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the key hash data.",
          "/// \\param address Address to get the keyhash data of."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBitcoinAddressKeyhash",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWBitcoinAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWIconProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Icon_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Icon_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWDerivationPath.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWCoinType.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWPurpose.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Represents a BIP44 DerivationPath in C++."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWDerivationPath",
        "markers": [
          {
            "g_variant": "TwExportClass"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a new DerivationPath with a purpose, coin, account, change and address.",
          "Must be deleted with TWDerivationPathDelete after use.",
          "/// \\param purpose The purpose of the Path.",
          "\\param coin The coin type of the Path.",
          "\\param account The derivation of the Path.",
          "\\param change The derivation path of the Path.",
          "\\param address hex encoded public key.",
          "\\return A new DerivationPath."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDerivationPathCreate",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWPurpose"
              }
            },
            "markers": [],
            "name": "purpose"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt32T"
                }
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt32T"
                }
              }
            },
            "markers": [],
            "name": "account"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt32T"
                }
              }
            },
            "markers": [],
            "name": "change"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt32T"
                }
              }
            },
            "markers": [],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWDerivationPath"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a new DerivationPath with a string",
          "/// \\param string The string of the Path.",
          "\\return A new DerivationPath or null if string is invalid."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDerivationPathCreateWithString",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWDerivationPath"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Deletes a DerivationPath.",
          "/// \\param path DerivationPath to delete."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDerivationPathDelete",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWDerivationPath"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "path"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the index component of a DerivationPath.",
          "/// \\param path DerivationPath to get the index of.",
          "\\param index The index component of the DerivationPath.",
          "\\return DerivationPathIndex or null if index is invalid."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDerivationPathIndexAt",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWDerivationPath"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "path"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt32T"
                }
              }
            },
            "markers": [],
            "name": "index"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWDerivationPathIndex"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the indices count of a DerivationPath.",
          "/// \\param path DerivationPath to get the indices count of.",
          "\\return The indices count of the DerivationPath."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDerivationPathIndicesCount",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWDerivationPath"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "path"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "UInt32T"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the purpose enum of a DerivationPath.",
          "/// \\param path DerivationPath to get the purpose of.",
          "\\return DerivationPathPurpose."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDerivationPathPurpose",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWDerivationPath"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "path"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Enum",
              "value": "TWPurpose"
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the coin value of a derivation path.",
          "/// \\param path DerivationPath to get the coin of.",
          "\\return The coin part of the DerivationPath."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDerivationPathCoin",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWDerivationPath"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "path"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "UInt32T"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the account value of a derivation path.",
          "/// \\param path DerivationPath to get the account of.",
          "\\return the account part of a derivation path."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDerivationPathAccount",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWDerivationPath"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "path"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "UInt32T"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the change value of a derivation path.",
          "/// \\param path DerivationPath to get the change of.",
          "\\return The change part of a derivation path."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDerivationPathChange",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWDerivationPath"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "path"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "UInt32T"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the address value of a derivation path.",
          "/// \\param path DerivationPath to get the address of.",
          "\\return The address part of the derivation path."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDerivationPathAddress",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWDerivationPath"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "path"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "UInt32T"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the string description of a derivation path.",
          "/// \\param path DerivationPath to get the address of.",
          "\\return The string description of the derivation path."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWDerivationPathDescription",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWDerivationPath"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "path"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWTronProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tron_Proto_TransferContract",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tron_Proto_TransferAssetContract",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tron_Proto_TransferTRC20Contract",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tron_Proto_FreezeBalanceContract",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tron_Proto_FreezeBalanceV2Contract",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tron_Proto_UnfreezeBalanceV2Contract",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tron_Proto_WithdrawExpireUnfreezeContract",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tron_Proto_DelegateResourceContract",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tron_Proto_UnDelegateResourceContract",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tron_Proto_UnfreezeBalanceContract",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tron_Proto_UnfreezeAssetContract",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tron_Proto_VoteAssetContract",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tron_Proto_VoteWitnessContract",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tron_Proto_WithdrawBalanceContract",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tron_Proto_TriggerSmartContract",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tron_Proto_BlockHeader",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tron_Proto_Transaction",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tron_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tron_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWEthereumProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Ethereum_Proto_Transaction",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Ethereum_Proto_UserOperation",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Ethereum_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Ethereum_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWMultiversXProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_MultiversX_Proto_GenericAction",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_MultiversX_Proto_EGLDTransfer",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_MultiversX_Proto_ESDTTransfer",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_MultiversX_Proto_ESDTNFTTransfer",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_MultiversX_Proto_Accounts",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_MultiversX_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_MultiversX_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWHarmonyProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Harmony_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Harmony_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Harmony_Proto_TransactionMessage",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Harmony_Proto_StakingMessage",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Harmony_Proto_Description",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Harmony_Proto_Decimal",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Harmony_Proto_CommissionRate",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Harmony_Proto_DirectiveCreateValidator",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Harmony_Proto_DirectiveEditValidator",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Harmony_Proto_DirectiveDelegate",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Harmony_Proto_DirectiveUndelegate",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Harmony_Proto_DirectiveCollectRewards",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWOntologyProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Ontology_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Ontology_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWSuiProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Sui_Proto_SignDirect",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Sui_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Sui_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWAptosProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Aptos_Proto_TransferMessage",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Aptos_Proto_StructTag",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Aptos_Proto_TokenTransferMessage",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Aptos_Proto_ManagedTokensRegisterMessage",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Aptos_Proto_CreateAccountMessage",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Aptos_Proto_OfferNftMessage",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Aptos_Proto_CancelOfferNftMessage",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Aptos_Proto_ClaimNftMessage",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Aptos_Proto_NftMessage",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Aptos_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Aptos_Proto_TransactionAuthenticator",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Aptos_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWBase.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Unrecognized",
      "value": "#if !defined(TW_EXTERN_C_BEGIN)"
    },
    {
      "g_type": "Unrecognized",
      "value": "#if defined(__cplusplus)"
    },
    {
      "g_type": "Define",
      "value": {
        "key": "TW_EXTERN_C_BEGIN",
        "value": "extern \"C\" {"
      }
    },
    {
      "g_type": "Define",
      "value": {
        "key": "TW_EXTERN_C_END",
        "value": "}"
      }
    },
    {
      "g_type": "Unrecognized",
      "value": "#else"
    },
    {
      "g_type": "Define",
      "value": {
        "key": "TW_EXTERN_C_BEGIN",
        "value": null
      }
    },
    {
      "g_type": "Define",
      "value": {
        "key": "TW_EXTERN_C_END",
        "value": null
      }
    },
    {
      "g_type": "Unrecognized",
      "value": "#endif"
    },
    {
      "g_type": "Unrecognized",
      "value": "#endif"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Marker for default visibility"
        ]
      }
    },
    {
      "g_type": "Define",
      "value": {
        "key": "TW_VISIBILITY_DEFAULT",
        "value": "__attribute__((visibility(\"default\")))"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Marker for exported classes"
        ]
      }
    },
    {
      "g_type": "Define",
      "value": {
        "key": "TW_EXPORT_CLASS",
        "value": null
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Marker for exported structs"
        ]
      }
    },
    {
      "g_type": "Define",
      "value": {
        "key": "TW_EXPORT_STRUCT",
        "value": null
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Marker for exported enums"
        ]
      }
    },
    {
      "g_type": "Define",
      "value": {
        "key": "TW_EXPORT_ENUM",
        "value": "(type)"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Marker for exported functions"
        ]
      }
    },
    {
      "g_type": "Define",
      "value": {
        "key": "TW_EXPORT_FUNC",
        "value": "extern"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Marker for exported methods"
        ]
      }
    },
    {
      "g_type": "Define",
      "value": {
        "key": "TW_EXPORT_METHOD",
        "value": "extern"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Marker for exported properties"
        ]
      }
    },
    {
      "g_type": "Define",
      "value": {
        "key": "TW_EXPORT_PROPERTY",
        "value": "extern"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Marker for exported static methods"
        ]
      }
    },
    {
      "g_type": "Define",
      "value": {
        "key": "TW_EXPORT_STATIC_METHOD",
        "value": "extern"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Marker for exported static properties"
        ]
      }
    },
    {
      "g_type": "Define",
      "value": {
        "key": "TW_EXPORT_STATIC_PROPERTY",
        "value": "extern"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Marker for discardable result (static) method"
        ]
      }
    },
    {
      "g_type": "Define",
      "value": {
        "key": "TW_METHOD_DISCARDABLE_RESULT",
        "value": null
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Marker for Protobuf types to be serialized across the interface"
        ]
      }
    },
    {
      "g_type": "Define",
      "value": {
        "key": "PROTO",
        "value": "(x) TWData *"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Unrecognized",
      "value": "#if __has_feature(assume_nonnull)"
    },
    {
      "g_type": "Define",
      "value": {
        "key": "TW_ASSUME_NONNULL_BEGIN",
        "value": "_Pragma(\"clang assume_nonnull begin\")"
      }
    },
    {
      "g_type": "Define",
      "value": {
        "key": "TW_ASSUME_NONNULL_END",
        "value": "_Pragma(\"clang assume_nonnull end\")"
      }
    },
    {
      "g_type": "Unrecognized",
      "value": "#else"
    },
    {
      "g_type": "Define",
      "value": {
        "key": "TW_ASSUME_NONNULL_BEGIN",
        "value": null
      }
    },
    {
      "g_type": "Define",
      "value": {
        "key": "TW_ASSUME_NONNULL_END",
        "value": null
      }
    },
    {
      "g_type": "Unrecognized",
      "value": "#endif"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Unrecognized",
      "value": "#if defined(__cplusplus) && (__cplusplus >= 201402L)"
    },
    {
      "g_type": "Unrecognized",
      "value": "#  define TW_DEPRECATED(since) [[deprecated(\"Since \" #since)]]"
    },
    {
      "g_type": "Unrecognized",
      "value": "#  define TW_DEPRECATED_FOR(since, replacement) [[deprecated(\"Since \" #since \"; use \" #replacement)]]"
    },
    {
      "g_type": "Unrecognized",
      "value": "#else"
    },
    {
      "g_type": "Unrecognized",
      "value": "#  define TW_DEPRECATED(since)"
    },
    {
      "g_type": "Unrecognized",
      "value": "#  define TW_DEPRECATED_FOR(since, replacement)"
    },
    {
      "g_type": "Unrecognized",
      "value": "#endif"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Unrecognized",
      "value": "#if !__has_feature(nullability)"
    },
    {
      "g_type": "Unrecognized",
      "value": "#ifndef _Nullable"
    },
    {
      "g_type": "Define",
      "value": {
        "key": "_Nullable",
        "value": null
      }
    },
    {
      "g_type": "Unrecognized",
      "value": "#endif"
    },
    {
      "g_type": "Unrecognized",
      "value": "#ifndef _Nonnull"
    },
    {
      "g_type": "Define",
      "value": {
        "key": "_Nonnull",
        "value": null
      }
    },
    {
      "g_type": "Unrecognized",
      "value": "#endif"
    },
    {
      "g_type": "Unrecognized",
      "value": "#ifndef _Null_unspecified"
    },
    {
      "g_type": "Define",
      "value": {
        "key": "_Null_unspecified",
        "value": null
      }
    },
    {
      "g_type": "Unrecognized",
      "value": "#endif"
    },
    {
      "g_type": "Unrecognized",
      "value": "#endif"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Unrecognized",
      "value": "#include <stdbool.h>"
    },
    {
      "g_type": "Unrecognized",
      "value": "#include <stddef.h>"
    },
    {
      "g_type": "Unrecognized",
      "value": "#include <stdint.h>"
    },
    {
      "g_type": "Unrecognized",
      "value": "#include <stdlib.h>"
    }
  ],
  "../include/TrustWalletCore/TWStarkWare.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWPrivateKey.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWDerivationPath.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWStarkWare",
        "markers": [
          {
            "g_variant": "TWExternCBegin"
          },
          {
            "g_variant": "TwExportStruct"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Generates the private stark key at the given derivation path from a valid eth signature",
          "/// \\param derivationPath non-null StarkEx Derivation path",
          "\\param signature valid eth signature",
          "\\return  The private key for the specified derivation path/signature"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStarkWareGetStarkKeyFromSignature",
        "params": [
          {
            "type": {
              "g_variant": "Const",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWDerivationPath"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "derivationPath"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "signature"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPrivateKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWNULSProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NULS_Proto_TransactionCoinFrom",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NULS_Proto_TransactionCoinTo",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NULS_Proto_Signature",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NULS_Proto_Transaction",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NULS_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_NULS_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWPublicKey.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWPublicKeyType.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Unrecognized",
            "value": "size_t"
          }
        },
        "name": "TWPublicKeyCompressedSize",
        "value": "33",
        "markers": []
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Unrecognized",
            "value": "size_t"
          }
        },
        "name": "TWPublicKeyUncompressedSize",
        "value": "65",
        "markers": []
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Represents a public key."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWPublicKey",
        "markers": [
          {
            "g_variant": "TwExportClass"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Create a public key from a block of data",
          "/// \\param data Non-null block of data representing the public key",
          "\\param type type of the public key",
          "\\note Should be deleted with \\TWPublicKeyDelete",
          "\\return Nullable pointer to the public key"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPublicKeyCreateWithData",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWPublicKeyType"
              }
            },
            "markers": [],
            "name": "type"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPublicKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Delete the given public key",
          "/// \\param pk Non-null pointer to a public key"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPublicKeyDelete",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pk"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines if the given public key is valid or not",
          "/// \\param data Non-null block of data representing the public key",
          "\\param type type of the public key",
          "\\return true if the block of data is a valid public key, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPublicKeyIsValid",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWPublicKeyType"
              }
            },
            "markers": [],
            "name": "type"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines if the given public key is compressed or not",
          "/// \\param pk Non-null pointer to a public key",
          "\\return true if the public key is compressed, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPublicKeyIsCompressed",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pk"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Give the compressed public key of the given non-compressed public key",
          "/// \\param from Non-null pointer to a non-compressed public key",
          "\\return Non-null pointer to the corresponding compressed public-key"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPublicKeyCompressed",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "from"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPublicKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Give the non-compressed public key of a corresponding compressed public key",
          "/// \\param from Non-null pointer to the corresponding compressed public key",
          "\\return Non-null pointer to the corresponding non-compressed public key"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPublicKeyUncompressed",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "from"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPublicKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Gives the raw data of a given public-key",
          "/// \\param pk Non-null pointer to a public key",
          "\\return Non-null pointer to the raw block of data of the given public key"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPublicKeyData",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pk"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Verify the validity of a signature and a message using the given public key",
          "/// \\param pk Non-null pointer to a public key",
          "\\param signature Non-null pointer to a block of data corresponding to the signature",
          "\\param message Non-null pointer to a block of data corresponding to the message",
          "\\return true if the signature and the message belongs to the given public key, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPublicKeyVerify",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pk"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "signature"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "message"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Verify the validity as DER of a signature and a message using the given public key",
          "/// \\param pk Non-null pointer to a public key",
          "\\param signature Non-null pointer to a block of data corresponding to the signature",
          "\\param message Non-null pointer to a block of data corresponding to the message",
          "\\return true if the signature and the message belongs to the given public key, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPublicKeyVerifyAsDER",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pk"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "signature"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "message"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Verify a Zilliqa schnorr signature with a signature and message.",
          "/// \\param pk Non-null pointer to a public key",
          "\\param signature Non-null pointer to a block of data corresponding to the signature",
          "\\param message Non-null pointer to a block of data corresponding to the message",
          "\\return true if the signature and the message belongs to the given public key, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPublicKeyVerifyZilliqaSchnorr",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "pk"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "signature"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "message"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Give the public key type (eliptic) of a given public key",
          "/// \\param publicKey Non-null pointer to a public key",
          "\\return The public key type of the given public key (eliptic)"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPublicKeyKeyType",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "publicKey"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Enum",
              "value": "TWPublicKeyType"
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Get the public key description from a given public key",
          "/// \\param publicKey Non-null pointer to a public key",
          "\\return Non-null pointer to a string representing the description of the public key"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPublicKeyDescription",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "publicKey"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Try to get a public key from a given signature and a message",
          "/// \\param signature Non-null pointer to a block of data corresponding to the signature",
          "\\param message Non-null pointer to a block of data corresponding to the message",
          "\\return Null pointer if the public key can't be recover from the given signature and message,",
          "pointer to the public key otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWPublicKeyRecover",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "signature"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "message"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPublicKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWStoredKeyEncryption.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Preset encryption kind"
        ]
      }
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TwExportEnum",
        "value": "uint32_t"
      }
    },
    {
      "g_type": "EnumDecl",
      "value": {
        "name": "TWStoredKeyEncryption",
        "variants": [
          [
            "TWStoredKeyEncryptionAes128Ctr",
            0
          ],
          [
            "TWStoredKeyEncryptionAes128Cbc",
            1
          ],
          [
            "TWStoredKeyEncryptionAes192Ctr",
            2
          ],
          [
            "TWStoredKeyEncryptionAes256Ctr",
            3
          ]
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWStoredKey.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWCoinType.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWDerivation.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWHDWallet.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWPrivateKey.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWStoredKeyEncryptionLevel.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWStoredKeyEncryption.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Represents a key stored as an encrypted file."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWStoredKey",
        "markers": [
          {
            "g_variant": "TwExportClass"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Loads a key from a file.",
          "/// \\param path filepath to the key as a non-null string",
          "\\note Returned object needs to be deleted with \\TWStoredKeyDelete",
          "\\return Nullptr if the key can't be load, the stored key otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyLoad",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "path"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWStoredKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Imports a private key.",
          "/// \\param privateKey Non-null Block of data private key",
          "\\param name The name of the stored key to import as a non-null string",
          "\\param password Non-null block of data, password of the stored key",
          "\\param coin the coin type",
          "\\note Returned object needs to be deleted with \\TWStoredKeyDelete",
          "\\return Nullptr if the key can't be imported, the stored key otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyImportPrivateKey",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "privateKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "name"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "password"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWStoredKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Imports a private key.",
          "/// \\param privateKey Non-null Block of data private key",
          "\\param name The name of the stored key to import as a non-null string",
          "\\param password Non-null block of data, password of the stored key",
          "\\param coin the coin type",
          "\\param encryption cipher encryption mode",
          "\\note Returned object needs to be deleted with \\TWStoredKeyDelete",
          "\\return Nullptr if the key can't be imported, the stored key otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyImportPrivateKeyWithEncryption",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "privateKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "name"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "password"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWStoredKeyEncryption"
              }
            },
            "markers": [],
            "name": "encryption"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWStoredKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Imports an HD wallet.",
          "/// \\param mnemonic Non-null bip39 mnemonic",
          "\\param name The name of the stored key to import as a non-null string",
          "\\param password Non-null block of data, password of the stored key",
          "\\param coin the coin type",
          "\\note Returned object needs to be deleted with \\TWStoredKeyDelete",
          "\\return Nullptr if the key can't be imported, the stored key otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyImportHDWallet",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "mnemonic"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "name"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "password"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWStoredKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Imports an HD wallet.",
          "/// \\param mnemonic Non-null bip39 mnemonic",
          "\\param name The name of the stored key to import as a non-null string",
          "\\param password Non-null block of data, password of the stored key",
          "\\param coin the coin type",
          "\\param encryption cipher encryption mode",
          "\\note Returned object needs to be deleted with \\TWStoredKeyDelete",
          "\\return Nullptr if the key can't be imported, the stored key otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyImportHDWalletWithEncryption",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "mnemonic"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "name"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "password"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWStoredKeyEncryption"
              }
            },
            "markers": [],
            "name": "encryption"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWStoredKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Imports a key from JSON.",
          "/// \\param json Json stored key import format as a non-null block of data",
          "\\note Returned object needs to be deleted with \\TWStoredKeyDelete",
          "\\return Nullptr if the key can't be imported, the stored key otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyImportJSON",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "json"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWStoredKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a new key, with given encryption strength level. Returned object needs to be deleted.",
          "/// \\param name The name of the key to be stored",
          "\\param password Non-null block of data, password of the stored key",
          "\\param encryptionLevel The level of encryption, see \\TWStoredKeyEncryptionLevel",
          "\\note Returned object needs to be deleted with \\TWStoredKeyDelete",
          "\\return The stored key as a non-null pointer"
        ]
      }
    },
    {
      "g_type": "Unrecognized",
      "value": "TW_DEPRECATED_FOR(\"3.1.1\", \"TWStoredKeyCreateLevelAndEncryption\")"
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyCreateLevel",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "name"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "password"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWStoredKeyEncryptionLevel"
              }
            },
            "markers": [],
            "name": "encryptionLevel"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWStoredKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a new key, with given encryption strength level.  Returned object needs to be deleted.",
          "/// \\param name The name of the key to be stored",
          "\\param password Non-null block of data, password of the stored key",
          "\\param encryptionLevel The level of encryption, see \\TWStoredKeyEncryptionLevel",
          "\\param encryption cipher encryption mode",
          "\\note Returned object needs to be deleted with \\TWStoredKeyDelete",
          "\\return The stored key as a non-null pointer"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyCreateLevelAndEncryption",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "name"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "password"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWStoredKeyEncryptionLevel"
              }
            },
            "markers": [],
            "name": "encryptionLevel"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWStoredKeyEncryption"
              }
            },
            "markers": [],
            "name": "encryption"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWStoredKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a new key.",
          "/// \\deprecated use TWStoredKeyCreateLevel.",
          "\\param name The name of the key to be stored",
          "\\param password Non-null block of data, password of the stored key",
          "\\note Returned object needs to be deleted with \\TWStoredKeyDelete",
          "\\return The stored key as a non-null pointer"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyCreate",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "name"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "password"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWStoredKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates a new key.",
          "/// \\deprecated use TWStoredKeyCreateLevel.",
          "\\param name The name of the key to be stored",
          "\\param password Non-null block of data, password of the stored key",
          "\\param encryption cipher encryption mode",
          "\\note Returned object needs to be deleted with \\TWStoredKeyDelete",
          "\\return The stored key as a non-null pointer"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyCreateEncryption",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "name"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "password"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWStoredKeyEncryption"
              }
            },
            "markers": [],
            "name": "encryption"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWStoredKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Delete a stored key",
          "/// \\param key The key to be deleted"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyDelete",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWStoredKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Stored key unique identifier.",
          "/// \\param key Non-null pointer to a stored key",
          "\\note Returned object needs to be deleted with \\TWStringDelete",
          "\\return The stored key unique identifier if it's found, null pointer otherwise."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyIdentifier",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWStoredKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Stored key namer.",
          "/// \\param key Non-null pointer to a stored key",
          "\\note Returned object needs to be deleted with \\TWStringDelete",
          "\\return The stored key name as a non-null string pointer."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyName",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWStoredKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Whether this key is a mnemonic phrase for a HD wallet.",
          "/// \\param key Non-null pointer to a stored key",
          "\\return true if the given stored key is a mnemonic, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyIsMnemonic",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWStoredKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "The number of accounts.",
          "/// \\param key Non-null pointer to a stored key",
          "\\return the number of accounts associated to the given stored key"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyAccountCount",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWStoredKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Unrecognized",
              "value": "size_t"
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the account at a given index.",
          "/// \\param key Non-null pointer to a stored key",
          "\\param index the account index to be retrieved",
          "\\note Returned object needs to be deleted with \\TWAccountDelete",
          "\\return Null pointer if the associated account is not found, pointer to the account otherwise."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyAccount",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWStoredKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "size_t"
              }
            },
            "markers": [],
            "name": "index"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWAccount"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the account for a specific coin, creating it if necessary.",
          "/// \\param key Non-null pointer to a stored key",
          "\\param coin The coin type",
          "\\param wallet The associated HD wallet, can be null.",
          "\\note Returned object needs to be deleted with \\TWAccountDelete",
          "\\return Null pointer if the associated account is not found/not created, pointer to the account otherwise."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyAccountForCoin",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWStoredKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWHDWallet"
                }
              }
            },
            "markers": [
              {
                "g_variant": "Nullable"
              }
            ],
            "name": "wallet"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWAccount"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the account for a specific coin + derivation, creating it if necessary.",
          "/// \\param key Non-null pointer to a stored key",
          "\\param coin The coin type",
          "\\param derivation The derivation for the given coin",
          "\\param wallet the associated HD wallet, can be null.",
          "\\note Returned object needs to be deleted with \\TWAccountDelete",
          "\\return Null pointer if the associated account is not found/not created, pointer to the account otherwise."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyAccountForCoinDerivation",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWStoredKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWDerivation"
              }
            },
            "markers": [],
            "name": "derivation"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWHDWallet"
                }
              }
            },
            "markers": [
              {
                "g_variant": "Nullable"
              }
            ],
            "name": "wallet"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWAccount"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Adds a new account, using given derivation (usually TWDerivationDefault)",
          "and derivation path (usually matches path from derivation, but custom possible).",
          "/// \\param key Non-null pointer to a stored key",
          "\\param address Non-null pointer to the address of the coin for this account",
          "\\param coin coin type",
          "\\param derivation derivation of the given coin type",
          "\\param derivationPath HD bip44 derivation path of the given coin",
          "\\param publicKey Non-null public key of the given coin/address",
          "\\param extendedPublicKey Non-null extended public key of the given coin/address"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyAddAccountDerivation",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWStoredKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWDerivation"
              }
            },
            "markers": [],
            "name": "derivation"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "derivationPath"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "publicKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "extendedPublicKey"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Adds a new account, using given derivation path.",
          "/// \\deprecated Use TWStoredKeyAddAccountDerivation (with TWDerivationDefault) instead.",
          "\\param key Non-null pointer to a stored key",
          "\\param address Non-null pointer to the address of the coin for this account",
          "\\param coin coin type",
          "\\param derivationPath HD bip44 derivation path of the given coin",
          "\\param publicKey Non-null public key of the given coin/address",
          "\\param extendedPublicKey Non-null extended public key of the given coin/address"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyAddAccount",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWStoredKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "derivationPath"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "publicKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "extendedPublicKey"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Remove the account for a specific coin",
          "/// \\param key Non-null pointer to a stored key",
          "\\param coin Account coin type to be removed"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyRemoveAccountForCoin",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWStoredKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Remove the account for a specific coin with the given derivation.",
          "/// \\param key Non-null pointer to a stored key",
          "\\param coin Account coin type to be removed",
          "\\param derivation The derivation of the given coin type"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyRemoveAccountForCoinDerivation",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWStoredKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWDerivation"
              }
            },
            "markers": [],
            "name": "derivation"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Remove the account for a specific coin with the given derivation path.",
          "/// \\param key Non-null pointer to a stored key",
          "\\param coin Account coin type to be removed",
          "\\param derivationPath The derivation path (bip44) of the given coin type"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyRemoveAccountForCoinDerivationPath",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWStoredKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "derivationPath"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Saves the key to a file.",
          "/// \\param key Non-null pointer to a stored key",
          "\\param path Non-null string filepath where the key will be saved",
          "\\return true if the key was successfully stored in the given filepath file, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyStore",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWStoredKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "path"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Decrypts the private key.",
          "/// \\param key Non-null pointer to a stored key",
          "\\param password Non-null block of data, password of the stored key",
          "\\return Decrypted private key as a block of data if success, null pointer otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyDecryptPrivateKey",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWStoredKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "password"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Decrypts the mnemonic phrase.",
          "/// \\param key Non-null pointer to a stored key",
          "\\param password Non-null block of data, password of the stored key",
          "\\return Bip39 decrypted mnemonic if success, null pointer otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyDecryptMnemonic",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWStoredKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "password"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the private key for a specific coin.  Returned object needs to be deleted.",
          "/// \\param key Non-null pointer to a stored key",
          "\\param coin Account coin type to be queried",
          "\\note Returned object needs to be deleted with \\TWPrivateKeyDelete",
          "\\return Null pointer on failure, pointer to the private key otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyPrivateKey",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWStoredKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "password"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWPrivateKey"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Decrypts and returns the HD Wallet for mnemonic phrase keys.  Returned object needs to be deleted.",
          "/// \\param key Non-null pointer to a stored key",
          "\\param password Non-null block of data, password of the stored key",
          "\\note Returned object needs to be deleted with \\TWHDWalletDelete",
          "\\return Null pointer on failure, pointer to the HDWallet otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyWallet",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWStoredKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "password"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWHDWallet"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Exports the key as JSON",
          "/// \\param key Non-null pointer to a stored key",
          "\\return Null pointer on failure, pointer to a block of data containing the json otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyExportJSON",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWStoredKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Fills in empty and invalid addresses.",
          "This method needs the encryption password to re-derive addresses from private keys.",
          "/// \\param key Non-null pointer to a stored key",
          "\\param password Non-null block of data, password of the stored key",
          "\\return `false` if the password is incorrect, true otherwise."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyFixAddresses",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWStoredKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "password"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Retrieve stored key encoding parameters, as JSON string.",
          "/// \\param key Non-null pointer to a stored key",
          "\\return Null pointer on failure, encoding parameter as a json string otherwise."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWStoredKeyEncryptionParameters",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWStoredKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "key"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWWavesProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Waves_Proto_TransferMessage",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Waves_Proto_LeaseMessage",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Waves_Proto_CancelLeaseMessage",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Waves_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Waves_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWCoinType.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBlockchain.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWCurve.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWHDVersion.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWHRP.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWPurpose.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWDerivation.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWPublicKeyType.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Represents a private key."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWPrivateKey",
        "markers": []
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Represents a public key."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWPublicKey",
        "markers": []
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Coin type for Level 2 of BIP44.",
          "/// \\see https://github.com/satoshilabs/slips/blob/master/slip-0044.md"
        ]
      }
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TwExportEnum",
        "value": "uint32_t"
      }
    },
    {
      "g_type": "EnumDecl",
      "value": {
        "name": "TWCoinType",
        "variants": [
          [
            "TWCoinTypeAeternity",
            457
          ],
          [
            "TWCoinTypeAion",
            425
          ],
          [
            "TWCoinTypeBinance",
            714
          ],
          [
            "TWCoinTypeBitcoin",
            0
          ],
          [
            "TWCoinTypeBitcoinCash",
            145
          ],
          [
            "TWCoinTypeBitcoinGold",
            156
          ],
          [
            "TWCoinTypeCallisto",
            820
          ],
          [
            "TWCoinTypeCardano",
            1815
          ],
          [
            "TWCoinTypeCosmos",
            118
          ],
          [
            "TWCoinTypeDash",
            5
          ],
          [
            "TWCoinTypeDecred",
            42
          ],
          [
            "TWCoinTypeDigiByte",
            20
          ],
          [
            "TWCoinTypeDogecoin",
            3
          ],
          [
            "TWCoinTypeEOS",
            194
          ],
          [
            "TWCoinTypeWAX",
            14001
          ],
          [
            "TWCoinTypeEthereum",
            60
          ],
          [
            "TWCoinTypeEthereumClassic",
            61
          ],
          [
            "TWCoinTypeFIO",
            235
          ],
          [
            "TWCoinTypeGoChain",
            6060
          ],
          [
            "TWCoinTypeGroestlcoin",
            17
          ],
          [
            "TWCoinTypeICON",
            74
          ],
          [
            "TWCoinTypeIoTeX",
            304
          ],
          [
            "TWCoinTypeKava",
            459
          ],
          [
            "TWCoinTypeKin",
            2017
          ],
          [
            "TWCoinTypeLitecoin",
            2
          ],
          [
            "TWCoinTypeMonacoin",
            22
          ],
          [
            "TWCoinTypeNebulas",
            2718
          ],
          [
            "TWCoinTypeNULS",
            8964
          ],
          [
            "TWCoinTypeNano",
            165
          ],
          [
            "TWCoinTypeNEAR",
            397
          ],
          [
            "TWCoinTypeNimiq",
            242
          ],
          [
            "TWCoinTypeOntology",
            1024
          ],
          [
            "TWCoinTypePOANetwork",
            178
          ],
          [
            "TWCoinTypeQtum",
            2301
          ],
          [
            "TWCoinTypeXRP",
            144
          ],
          [
            "TWCoinTypeSolana",
            501
          ],
          [
            "TWCoinTypeStellar",
            148
          ],
          [
            "TWCoinTypeTezos",
            1729
          ],
          [
            "TWCoinTypeTheta",
            500
          ],
          [
            "TWCoinTypeThunderCore",
            1001
          ],
          [
            "TWCoinTypeNEO",
            888
          ],
          [
            "TWCoinTypeTomoChain",
            889
          ],
          [
            "TWCoinTypeTron",
            195
          ],
          [
            "TWCoinTypeVeChain",
            818
          ],
          [
            "TWCoinTypeViacoin",
            14
          ],
          [
            "TWCoinTypeWanchain",
            5718350
          ],
          [
            "TWCoinTypeZcash",
            133
          ],
          [
            "TWCoinTypeFiro",
            136
          ],
          [
            "TWCoinTypeZilliqa",
            313
          ],
          [
            "TWCoinTypeZelcash",
            19167
          ],
          [
            "TWCoinTypeRavencoin",
            175
          ],
          [
            "TWCoinTypeWaves",
            5741564
          ],
          [
            "TWCoinTypeTerra",
            330
          ],
          [
            "TWCoinTypeTerraV2",
            10000330
          ],
          [
            "TWCoinTypeHarmony",
            1023
          ],
          [
            "TWCoinTypeAlgorand",
            283
          ],
          [
            "TWCoinTypeKusama",
            434
          ],
          [
            "TWCoinTypePolkadot",
            354
          ],
          [
            "TWCoinTypeFilecoin",
            461
          ],
          [
            "TWCoinTypeMultiversX",
            508
          ],
          [
            "TWCoinTypeBandChain",
            494
          ],
          [
            "TWCoinTypeSmartChainLegacy",
            10000714
          ],
          [
            "TWCoinTypeSmartChain",
            20000714
          ],
          [
            "TWCoinTypeOasis",
            474
          ],
          [
            "TWCoinTypePolygon",
            966
          ],
          [
            "TWCoinTypeTHORChain",
            931
          ],
          [
            "TWCoinTypeBluzelle",
            483
          ],
          [
            "TWCoinTypeOptimism",
            10000070
          ],
          [
            "TWCoinTypeZksync",
            10000324
          ],
          [
            "TWCoinTypeArbitrum",
            10042221
          ],
          [
            "TWCoinTypeECOChain",
            10000553
          ],
          [
            "TWCoinTypeAvalancheCChain",
            10009000
          ],
          [
            "TWCoinTypeXDai",
            10000100
          ],
          [
            "TWCoinTypeFantom",
            10000250
          ],
          [
            "TWCoinTypeCryptoOrg",
            394
          ],
          [
            "TWCoinTypeCelo",
            52752
          ],
          [
            "TWCoinTypeRonin",
            10002020
          ],
          [
            "TWCoinTypeOsmosis",
            10000118
          ],
          [
            "TWCoinTypeECash",
            899
          ],
          [
            "TWCoinTypeCronosChain",
            10000025
          ],
          [
            "TWCoinTypeSmartBitcoinCash",
            10000145
          ],
          [
            "TWCoinTypeKuCoinCommunityChain",
            10000321
          ],
          [
            "TWCoinTypeBoba",
            10000288
          ],
          [
            "TWCoinTypeMetis",
            1001088
          ],
          [
            "TWCoinTypeAurora",
            1323161554
          ],
          [
            "TWCoinTypeEvmos",
            10009001
          ],
          [
            "TWCoinTypeNativeEvmos",
            20009001
          ],
          [
            "TWCoinTypeMoonriver",
            10001285
          ],
          [
            "TWCoinTypeMoonbeam",
            10001284
          ],
          [
            "TWCoinTypeKavaEvm",
            10002222
          ],
          [
            "TWCoinTypeKlaytn",
            10008217
          ],
          [
            "TWCoinTypeMeter",
            18000
          ],
          [
            "TWCoinTypeOKXChain",
            996
          ],
          [
            "TWCoinTypeNervos",
            309
          ],
          [
            "TWCoinTypeEverscale",
            396
          ],
          [
            "TWCoinTypeAptos",
            637
          ],
          [
            "TWCoinTypeHedera",
            3030
          ],
          [
            "TWCoinTypeSecret",
            529
          ],
          [
            "TWCoinTypeNativeInjective",
            10000060
          ],
          [
            "TWCoinTypeAgoric",
            564
          ],
          [
            "TWCoinTypeTON",
            607
          ],
          [
            "TWCoinTypeSui",
            784
          ],
          [
            "TWCoinTypeStargaze",
            20000118
          ],
          [
            "TWCoinTypePolygonzkEVM",
            10001101
          ],
          [
            "TWCoinTypeJuno",
            30000118
          ],
          [
            "TWCoinTypeStride",
            40000118
          ],
          [
            "TWCoinTypeAxelar",
            50000118
          ],
          [
            "TWCoinTypeCrescent",
            60000118
          ],
          [
            "TWCoinTypeKujira",
            70000118
          ],
          [
            "TWCoinTypeIoTeXEVM",
            10004689
          ],
          [
            "TWCoinTypeNativeCanto",
            10007700
          ],
          [
            "TWCoinTypeComdex",
            80000118
          ],
          [
            "TWCoinTypeNeutron",
            90000118
          ],
          [
            "TWCoinTypeSommelier",
            11000118
          ],
          [
            "TWCoinTypeFetchAI",
            12000118
          ],
          [
            "TWCoinTypeMars",
            13000118
          ],
          [
            "TWCoinTypeUmee",
            14000118
          ],
          [
            "TWCoinTypeCoreum",
            10000990
          ],
          [
            "TWCoinTypeQuasar",
            15000118
          ],
          [
            "TWCoinTypePersistence",
            16000118
          ],
          [
            "TWCoinTypeAkash",
            17000118
          ],
          [
            "TWCoinTypeNoble",
            18000118
          ]
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the blockchain for a coin type.",
          "/// \\param coin A coin type",
          "\\return blockchain associated to the given coin type"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypeBlockchain",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Enum",
              "value": "TWBlockchain"
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the purpose for a coin type.",
          "/// \\param coin A coin type",
          "\\return purpose associated to the given coin type"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypePurpose",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Enum",
              "value": "TWPurpose"
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the curve that should be used for a coin type.",
          "/// \\param coin A coin type",
          "\\return curve that should be used for the given coin type"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypeCurve",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Enum",
              "value": "TWCurve"
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the xpub HD version that should be used for a coin type.",
          "/// \\param coin A coin type",
          "\\return xpub HD version that should be used for the given coin type"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypeXpubVersion",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Enum",
              "value": "TWHDVersion"
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the xprv HD version that should be used for a coin type.",
          "/// \\param coin A coin type",
          "\\return the xprv HD version that should be used for the given coin type."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypeXprvVersion",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Enum",
              "value": "TWHDVersion"
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Validates an address string.",
          "/// \\param coin A coin type",
          "\\param address A public address",
          "\\return true if the address is a valid public address of the given coin, false otherwise."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypeValidate",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the default derivation path for a particular coin.",
          "/// \\param coin A coin type",
          "\\return the default derivation path for the given coin type."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypeDerivationPath",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the derivation path for a particular coin with the explicit given derivation.",
          "/// \\param coin A coin type",
          "\\param derivation A derivation type",
          "\\return the derivation path for the given coin with the explicit given derivation"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypeDerivationPathWithDerivation",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWDerivation"
              }
            },
            "markers": [],
            "name": "derivation"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Derives the address for a particular coin from the private key.",
          "/// \\param coin A coin type",
          "\\param privateKey A valid private key",
          "\\return Derived address for the given coin from the private key."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypeDeriveAddress",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPrivateKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "privateKey"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Derives the address for a particular coin from the public key.",
          "/// \\param coin A coin type",
          "\\param publicKey A valid public key",
          "\\return Derived address for the given coin from the public key."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypeDeriveAddressFromPublicKey",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "publicKey"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "HRP for this coin type",
          "/// \\param coin A coin type",
          "\\return HRP of the given coin type."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypeHRP",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Enum",
              "value": "TWHRP"
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "P2PKH prefix for this coin type",
          "/// \\param coin A coin type",
          "\\return P2PKH prefix for the given coin type"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypeP2pkhPrefix",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "UInt8T"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "P2SH prefix for this coin type",
          "/// \\param coin A coin type",
          "\\return P2SH prefix for the given coin type"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypeP2shPrefix",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "UInt8T"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Static prefix for this coin type",
          "/// \\param coin A coin type",
          "\\return Static prefix for the given coin type"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypeStaticPrefix",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "UInt8T"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "ChainID for this coin type.",
          "/// \\param coin A coin type",
          "\\return ChainID for the given coin type.",
          "\\note Caller must free returned object."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypeChainId",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "SLIP-0044 id for this coin type",
          "/// \\param coin A coin type",
          "\\return SLIP-0044 id for the given coin type"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypeSlip44Id",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "UInt32T"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "SS58Prefix for this coin type",
          "/// \\param coin A coin type",
          "\\return SS58Prefix for the given coin type"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypeSS58Prefix",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "UInt32T"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "public key type for this coin type",
          "/// \\param coin A coin type",
          "\\return public key type for the given coin type"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWCoinTypePublicKeyType",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Enum",
                "value": "TWCoinType"
              }
            },
            "markers": [],
            "name": "coin"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Enum",
              "value": "TWPublicKeyType"
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWCardanoProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Cardano_Proto_OutPoint",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Cardano_Proto_TokenAmount",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Cardano_Proto_TxInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Cardano_Proto_TxOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Cardano_Proto_TokenBundle",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Cardano_Proto_Transfer",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Cardano_Proto_RegisterStakingKey",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Cardano_Proto_DeregisterStakingKey",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Cardano_Proto_Delegate",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Cardano_Proto_Withdraw",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Cardano_Proto_TransactionPlan",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Cardano_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Cardano_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWPolkadotProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Polkadot_Proto_Era",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Polkadot_Proto_Balance",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Polkadot_Proto_Staking",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Polkadot_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Polkadot_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWPurpose.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "HD wallet purpose",
          "/// \\see https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki",
          "\\see https://github.com/bitcoin/bips/blob/master/bip-0049.mediawiki",
          "\\see https://github.com/bitcoin/bips/blob/master/bip-0084.mediawiki"
        ]
      }
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TwExportEnum",
        "value": "uint32_t"
      }
    },
    {
      "g_type": "EnumDecl",
      "value": {
        "name": "TWPurpose",
        "variants": [
          [
            "TWPurposeBIP44",
            44
          ],
          [
            "TWPurposeBIP49",
            49
          ],
          [
            "TWPurposeBIP84",
            84
          ],
          [
            "TWPurposeBIP1852",
            1852
          ]
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWNanoProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Nano_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Nano_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWNEARAccount.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Represents a NEAR Account name"
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWNEARAccount",
        "markers": [
          {
            "g_variant": "TwExportClass"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Create a NEAR Account",
          "/// \\param string Account name",
          "\\note Account should be deleted by calling \\TWNEARAccountDelete",
          "\\return Pointer to a nullable NEAR Account."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWNEARAccountCreateWithString",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWNEARAccount"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Delete the given Near Account",
          "/// \\param account Pointer to a non-null NEAR Account"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWNEARAccountDelete",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWNEARAccount"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "account"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the user friendly string representation.",
          "/// \\param account Pointer to a non-null NEAR Account",
          "\\return Non-null string account description"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWNEARAccountDescription",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWNEARAccount"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "account"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWIoTeXProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_IoTeX_Proto_Transfer",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_IoTeX_Proto_Staking",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_IoTeX_Proto_ContractCall",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_IoTeX_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_IoTeX_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_IoTeX_Proto_ActionCore",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_IoTeX_Proto_Action",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWVeChainProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_VeChain_Proto_Clause",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_VeChain_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_VeChain_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWGroestlcoinAddress.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWPublicKey",
        "markers": [
          {
            "g_variant": "TWExternCBegin"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Represents a legacy Groestlcoin address."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWGroestlcoinAddress",
        "markers": [
          {
            "g_variant": "TwExportClass"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Compares two addresses for equality.",
          "/// \\param lhs left Non-null GroestlCoin address to be compared",
          "\\param rhs right Non-null GroestlCoin address to be compared",
          "\\return true if both address are equal, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWGroestlcoinAddressEqual",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWGroestlcoinAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "lhs"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWGroestlcoinAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "rhs"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines if the string is a valid Groestlcoin address.",
          "/// \\param string Non-null string.",
          "\\return true if it's a valid address, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWGroestlcoinAddressIsValidString",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Create an address from a base58 string representation.",
          "/// \\param string Non-null string",
          "\\note Must be deleted with \\TWGroestlcoinAddressDelete",
          "\\return Non-null GroestlcoinAddress"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWGroestlcoinAddressCreateWithString",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWGroestlcoinAddress"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Create an address from a public key and a prefix byte.",
          "/// \\param publicKey Non-null public key",
          "\\param prefix public key prefix",
          "\\note Must be deleted with \\TWGroestlcoinAddressDelete",
          "\\return Non-null GroestlcoinAddress"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWGroestlcoinAddressCreateWithPublicKey",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "publicKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt8T"
                }
              }
            },
            "markers": [],
            "name": "prefix"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWGroestlcoinAddress"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Delete a Groestlcoin address",
          "/// \\param address Non-null GroestlcoinAddress"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWGroestlcoinAddressDelete",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWGroestlcoinAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the address base58 string representation.",
          "/// \\param address Non-null GroestlcoinAddress",
          "\\return Address description as a non-null string"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWGroestlcoinAddressDescription",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWGroestlcoinAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWOasisProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Oasis_Proto_TransferMessage",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Oasis_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Oasis_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWStellarPassphrase.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Stellar network passphrase string."
        ]
      }
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TwExportEnum",
        "value": ""
      }
    },
    {
      "g_type": "EnumDecl",
      "value": {
        "name": "TWStellarPassphrase",
        "variants": [
          [
            "TWStellarPassphraseStellar",
            null
          ],
          [
            "TWStellarPassphraseKin",
            null
          ]
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "TWStellarPassphrase_Stellar",
        "value": "Public Global Stellar Network ; September 2015",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Char"
              }
            }
          }
        },
        "name": "TWStellarPassphrase_Kin",
        "value": "Kin Mainnet ; December 2018",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWBase32.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Base32 encode / decode functions"
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWBase32",
        "markers": [
          {
            "g_variant": "TwExportStruct"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Decode a Base32 input with the given alphabet",
          "/// \\param string Encoded base32 input to be decoded",
          "\\param alphabet Decode with the given alphabet, if nullptr ALPHABET_RFC4648 is used by default",
          "\\return The decoded data, can be null.",
          "\\note ALPHABET_RFC4648 doesn't support padding in the default alphabet"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBase32DecodeWithAlphabet",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "Nullable"
              }
            ],
            "name": "alphabet"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Decode a Base32 input with the default alphabet (ALPHABET_RFC4648)",
          "/// \\param string Encoded input to be decoded",
          "\\return The decoded data",
          "\\note Call TWBase32DecodeWithAlphabet with nullptr."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBase32Decode",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Encode an input to Base32 with the given alphabet",
          "/// \\param data Data to be encoded (raw bytes)",
          "\\param alphabet Encode with the given alphabet, if nullptr ALPHABET_RFC4648 is used by default",
          "\\return The encoded data",
          "\\note ALPHABET_RFC4648 doesn't support padding in the default alphabet"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBase32EncodeWithAlphabet",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "Nullable"
              }
            ],
            "name": "alphabet"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Encode an input to Base32 with the default alphabet (ALPHABET_RFC4648)",
          "/// \\param data Data to be encoded (raw bytes)",
          "\\return The encoded data",
          "\\note Call TWBase32EncodeWithAlphabet with nullptr."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWBase32Encode",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    },
    {
      "g_type": "Newline"
    }
  ],
  "../include/TrustWalletCore/TWBitcoinProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Bitcoin_Proto_Transaction",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Bitcoin_Proto_TransactionInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Bitcoin_Proto_OutPoint",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Bitcoin_Proto_TransactionOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Bitcoin_Proto_UnspentTransaction",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Bitcoin_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Bitcoin_Proto_TransactionPlan",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Bitcoin_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Bitcoin_Proto_HashPublicKey",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Bitcoin_Proto_PreSigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWAeternityProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Aeternity_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Aeternity_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWSolanaProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Solana_Proto_Transfer",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Solana_Proto_DelegateStake",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Solana_Proto_DeactivateStake",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Solana_Proto_DeactivateAllStake",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Solana_Proto_WithdrawStake",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Solana_Proto_StakeAccountValue",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Solana_Proto_WithdrawAllStake",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Solana_Proto_CreateTokenAccount",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Solana_Proto_TokenTransfer",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Solana_Proto_CreateAndTransferToken",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Solana_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Solana_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWHash.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Hash functions"
        ]
      }
    },
    {
      "g_type": "StructDecl",
      "value": {
        "name": "TWHash",
        "fields": [
          [
            "unused",
            {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt8T"
                }
              }
            }
          ]
        ],
        "markers": [
          {
            "g_variant": "TwExportStruct"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Unrecognized",
            "value": "size_t"
          }
        },
        "name": "TWHashSHA1Length",
        "value": "20",
        "markers": []
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Unrecognized",
            "value": "size_t"
          }
        },
        "name": "TWHashSHA256Length",
        "value": "32",
        "markers": []
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Unrecognized",
            "value": "size_t"
          }
        },
        "name": "TWHashSHA512Length",
        "value": "64",
        "markers": []
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StaticVar",
      "value": {
        "ty": {
          "g_variant": "Const",
          "value": {
            "g_variant": "Unrecognized",
            "value": "size_t"
          }
        },
        "name": "TWHashRipemdLength",
        "value": "20",
        "markers": []
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Computes the SHA1 of a block of data.",
          "/// \\param data Non-null block of data",
          "\\return Non-null computed SHA1 block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHashSHA1",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Computes the SHA256 of a block of data.",
          "/// \\param data Non-null block of data",
          "\\return Non-null computed SHA256 block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHashSHA256",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Computes the SHA512 of a block of data.",
          "/// \\param data Non-null block of data",
          "\\return Non-null computed SHA512 block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHashSHA512",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Computes the SHA512_256 of a block of data.",
          "/// \\param data Non-null block of data",
          "\\return Non-null computed SHA512_256 block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHashSHA512_256",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Computes the Keccak256 of a block of data.",
          "/// \\param data Non-null block of data",
          "\\return Non-null computed Keccak256 block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHashKeccak256",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Computes the Keccak512 of a block of data.",
          "/// \\param data Non-null block of data",
          "\\return Non-null computed Keccak512 block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHashKeccak512",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Computes the SHA3_256 of a block of data.",
          "/// \\param data Non-null block of data",
          "\\return Non-null computed SHA3_256 block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHashSHA3_256",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Computes the SHA3_512 of a block of data.",
          "/// \\param data Non-null block of data",
          "\\return Non-null computed SHA3_512 block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHashSHA3_512",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Computes the RIPEMD of a block of data.",
          "/// \\param data Non-null block of data",
          "\\return Non-null computed RIPEMD block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHashRIPEMD",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Computes the Blake256 of a block of data.",
          "/// \\param data Non-null block of data",
          "\\return Non-null computed Blake256 block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHashBlake256",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Computes the Blake2b of a block of data.",
          "/// \\param data Non-null block of data",
          "\\return Non-null computed Blake2b block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHashBlake2b",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Unrecognized",
                "value": "size_t"
              }
            },
            "markers": [],
            "name": "size"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Computes the Groestl512 of a block of data.",
          "/// \\param data Non-null block of data",
          "\\return Non-null computed Groestl512 block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHashGroestl512",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Computes the SHA256D of a block of data.",
          "/// \\param data Non-null block of data",
          "\\return Non-null computed SHA256D block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHashSHA256SHA256",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Computes the SHA256RIPEMD of a block of data.",
          "/// \\param data Non-null block of data",
          "\\return Non-null computed SHA256RIPEMD block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHashSHA256RIPEMD",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Computes the SHA3_256RIPEMD of a block of data.",
          "/// \\param data Non-null block of data",
          "\\return Non-null computed SHA3_256RIPEMD block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHashSHA3_256RIPEMD",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Computes the Blake256D of a block of data.",
          "/// \\param data Non-null block of data",
          "\\return Non-null computed Blake256D block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHashBlake256Blake256",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Computes the Blake256RIPEMD of a block of data.",
          "/// \\param data Non-null block of data",
          "\\return Non-null computed Blake256RIPEMD block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHashBlake256RIPEMD",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Computes the Groestl512D of a block of data.",
          "/// \\param data Non-null block of data",
          "\\return Non-null computed Groestl512D block of data"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWHashGroestl512Groestl512",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "data"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWRippleXAddress.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWHRP.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWPublicKey",
        "markers": [
          {
            "g_variant": "TWExternCBegin"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Represents a Ripple X-address."
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWRippleXAddress",
        "markers": [
          {
            "g_variant": "TwExportClass"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Compares two addresses for equality.",
          "/// \\param lhs left non-null pointer to a Ripple Address",
          "\\param rhs right non-null pointer to a Ripple Address",
          "\\return true if both address are equal, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWRippleXAddressEqual",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWRippleXAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "lhs"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWRippleXAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "rhs"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Determines if the string is a valid Ripple address.",
          "/// \\param string Non-null pointer to a string that represent the Ripple Address to be checked",
          "\\return true if the given address is a valid Ripple address, false otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWRippleXAddressIsValidString",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Bool"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates an address from a string representation.",
          "/// \\param string Non-null pointer to a string that should be a valid ripple address",
          "\\note Should be deleted with \\TWRippleXAddressDelete",
          "\\return Null pointer if the given string is an invalid ripple address, pointer to a Ripple address otherwise"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWRippleXAddressCreateWithString",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWString"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "string"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWRippleXAddress"
              }
            }
          },
          "markers": [
            {
              "g_variant": "Nullable"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Creates an address from a public key and destination tag.",
          "/// \\param publicKey Non-null pointer to a public key",
          "\\param tag valid ripple destination tag (1-10)",
          "\\note Should be deleted with \\TWRippleXAddressDelete",
          "\\return Non-null pointer to a Ripple Address"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWRippleXAddressCreateWithPublicKey",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWPublicKey"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "publicKey"
          },
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Scalar",
                "value": {
                  "g_variant": "UInt32T"
                }
              }
            },
            "markers": [],
            "name": "tag"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Struct",
                "value": "TWRippleXAddress"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Delete the given ripple address",
          "/// \\param address Non-null pointer to a Ripple Address"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWRippleXAddressDelete",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWRippleXAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "Void"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the address string representation.",
          "/// \\param address Non-null pointer to a Ripple Address",
          "\\return Non-null pointer to the ripple address string representation"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWRippleXAddressDescription",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWRippleXAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWString"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Returns the destination tag.",
          "/// \\param address Non-null pointer to a Ripple Address",
          "\\return The destination tag of the given Ripple Address (1-10)"
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWRippleXAddressTag",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Struct",
                  "value": "TWRippleXAddress"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "address"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Scalar",
              "value": {
                "g_variant": "UInt32T"
              }
            }
          },
          "markers": []
        },
        "markers": [
          {
            "g_variant": "TwExportProperty"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ],
  "../include/TrustWalletCore/TWTezosProto.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2020 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree.",
          "// This is a GENERATED FILE, changes made here WILL BE LOST."
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tezos_Proto_SigningInput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tezos_Proto_SigningOutput",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tezos_Proto_OperationList",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tezos_Proto_Operation",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tezos_Proto_FA12Parameters",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tezos_Proto_Txs",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tezos_Proto_TxObject",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tezos_Proto_FA2Parameters",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tezos_Proto_OperationParameters",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tezos_Proto_TransactionOperationData",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tezos_Proto_RevealOperationData",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    },
    {
      "g_type": "Typedef",
      "value": {
        "ty": {
          "g_variant": "Mutable",
          "value": {
            "g_variant": "Pointer",
            "value": {
              "g_variant": "Unrecognized",
              "value": "TWData"
            }
          }
        },
        "name": "TW_Tezos_Proto_DelegationOperationData",
        "markers": [
          {
            "g_variant": "NonNull"
          }
        ]
      }
    }
  ],
  "../include/TrustWalletCore/TWTHORChainSwap.h": [
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Copyright  2017-2023 Trust Wallet.",
          "// This file is part of Trust. The full Trust copyright notice, including",
          "terms governing use, modification, and redistribution, is contained in the",
          "file LICENSE at the root of the source code distribution tree."
        ]
      }
    },
    {
      "g_type": "HeaderPragma",
      "value": "once"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWBase.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWData.h"
    },
    {
      "g_type": "HeaderInclude",
      "value": "TWString.h"
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCBegin"
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "THORChain swap functions"
        ]
      }
    },
    {
      "g_type": "StructIndicator",
      "value": {
        "struct": "TWTHORChainSwap",
        "markers": [
          {
            "g_variant": "TwExportStruct"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Comment",
      "value": {
        "lines": [
          "Builds a THORChainSwap transaction input.",
          "/// \\param input The serialized data of SwapInput.",
          "\\return The serialized data of SwapOutput."
        ]
      }
    },
    {
      "g_type": "FunctionDecl",
      "value": {
        "name": "TWTHORChainSwapBuildSwap",
        "params": [
          {
            "type": {
              "g_variant": "Mutable",
              "value": {
                "g_variant": "Pointer",
                "value": {
                  "g_variant": "Unrecognized",
                  "value": "TWData"
                }
              }
            },
            "markers": [
              {
                "g_variant": "NonNull"
              }
            ],
            "name": "input"
          }
        ],
        "return_value": {
          "type": {
            "g_variant": "Mutable",
            "value": {
              "g_variant": "Pointer",
              "value": {
                "g_variant": "Unrecognized",
                "value": "TWData"
              }
            }
          },
          "markers": [
            {
              "g_variant": "NonNull"
            }
          ]
        },
        "markers": [
          {
            "g_variant": "TwExportStaticMethod"
          }
        ]
      }
    },
    {
      "g_type": "Newline"
    },
    {
      "g_type": "Marker",
      "value": {
        "g_variant": "TWExternCEnd"
      }
    }
  ]
}