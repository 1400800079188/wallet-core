// Copyright Â© 2017-2022 Trust Wallet.
//
// This file is part of Trust. The full Trust copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

#include "Arweave/Prime.h"
#include "HexCoding.h"

#include <gtest/gtest.h>

using namespace TW::Arweave;
using namespace TW;

const auto Random1 = "f5e1bb6bc4b9e265ce1dbd98ba928529f1426bbf4cb5dca03c5fcc23f5136842b985ff0f2dc9d7aa8152bfea346c11476212a6355073558dc51891edd5d9f9a23ef1035182c91f1b8cb1fd40663e27e78a8b3bf24a687fd50034afb164b430595f58b6da27164f4619786493e56ac1be42178b31317dbb0f42f8af325f0a0802906a449d1a63db8348fa1dc0aee3d4a22dcb5d841fe54ca969eea70abbca373889b5ccc98ce8d6fbbb3860a74c8363230718b7066575cc4b0e407025dddfe6a06bb7c70b1151588b32b4ff8a9e5228f050a402cf44688f4976d6a035223252a39f89a56711dcedc03baed24a6b09b6e540b766c5bc1c6188b57048cd3b92fa5546"; // 245 225 187 ...
const auto Prime1 = "28496039342510091697192198221767083630219086646222347188673024589312641792349428487695264855086466194344428544856010014821563710726314848322698008432095513394907443586454688811909688484234294950071656409041952274418734518274965726338461666388523012617368687380598058956114477681210080328284486162907531200647716358422794233239305580225135586194169049186176309473862763977602720998934949777401149573716061648701393279957809619193063128885996122706633626475240126607942262006979996746286173775569533696630379600673373704893542732795846226963940020881929764507846914003306719553801724235560511192860703384564109663688021";

TEST(ArweavePrime, primeCandidateFromInt) {
    {
        const auto p = primeCandidateFromInt(bigIntFromDataWithSign(parse_hex("77810102030405060708090a0b0c0d0e0f")), 16*8);
        EXPECT_EQ(boost::lexical_cast<std::string>(p), "171475644556860390410642066171895811621");
    }
    {   // first bit is 0, will be set to 1
        const auto p = primeCandidateFromInt(bigIntFromDataWithSign(parse_hex("77010102030405060708090a0b0c0d0e0f")), 16*8);
        EXPECT_EQ(boost::lexical_cast<std::string>(p), "171475644556860390410642066171895811621");
    }
    {
        const auto p = primeCandidateFromInt(bigIntFromDataWithSign(parse_hex("77880102030405060708090a0b0c0d0e0f")), 16*8);
        EXPECT_EQ(boost::lexical_cast<std::string>(p), "180780240527354801520968715593858223661");
    }
    {
        const auto p = primeCandidateFromInt(bigIntFromDataWithSign(parse_hex(Random1)), 2048);
        EXPECT_EQ(boost::lexical_cast<std::string>(p), Prime1);
    }
}
