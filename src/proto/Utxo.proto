syntax = "proto3";

package TW.Utxo.Proto;
option java_package = "wallet.core.jni.proto";

import "Common.proto";

message SigningInput {
	bytes private_key = 1;

	// The protocol version, is currently expected to be 1 or 2 (BIP68)
	int32 version = 2;

	// Block height or timestamp indicating at what point transactions can be
	// included in a block.
	oneof lock_time {
		uint32 blocks = 3;
		uint32 seconds = 4;
	}

	// The inputs of the transaction to sign. If an individual input does not
	// provide an index, then the index of the inserted order is used.
	repeated TxVariant inputs = 5;

	repeated TxOut outputs = 6;
}

message TxVariant {
	optional bytes private_key = 1;

	// The referenced transaction input.
	TxIn txin = 2;

	// The sighash type.
	SighashType sighash = 3;

	// Extra input for Segwit hashing algorithm (e.g. P2WSH, P2WPK).
	message Segwit {
		// The value (amount) and spending condition of the input.
		TxOut txout = 1;
	}

	// Extra input for Taproot
	message Taproot {
		message Prevouts {
			repeated TxOut prevouts = 1;
		}

		// Contains one more inputs. Most often `all` is used which contains
		// all inputs. If SighashType::*AnyoneCanPay is provided, then `one` can be
		// used.
		oneof prevouts {
			TxOut one = 1;
			Prevouts all = 2;
		}
	}

	oneof variant {
		// None implies _Legacy_
		Segwit segwit_input = 4;
		Taproot taproot_input = 5;
	}
}

enum SighashType {
	// Sign all outputs (default).
	All = 1; // 0x01
	// Sign no outputs, anyone can choose the destination.
	None = 2; // 0x02
	// Sign the output whose index matches this inputs index.
	Single = 3; // 0x03
	//Sign all outputs but only this input.
	AllPlusAnyoneCanPay = 129; //  0x81
	// Sign no outputs and only this input.
	NonePlusAnyoneCanPay = 130; // 0x82
	// Sign one output and only this input.
	SinglePlusAnyoneCanPay = 131; // 0x83
}

message TxIn {
	// The referenced transaction hash.
	bytes txid = 1;

	// The index of the referenced output.
	uint32 vout = 2;

	// The data used to statisfy the spending condition of the referenced
	// output.
	oneof spending_data {
		bytes script_isg = 3;
		bytes witness = 4;
	}

	// The sequence number (TODO).
	uint32 sequence = 5;
}

// The output of a transaction.
message TxOut {
	// The value of the output (amount).
	uint64 value = 1;
	// The spending condition of the output.
	bytes script_pubkey = 2;
}
