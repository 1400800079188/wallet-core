// Copyright Â© 2017-2021 Trust Wallet.
//
// This file is part of Trust. The full Trust copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

syntax = "proto3";

package TW.Avalanche.Proto;
option java_package = "wallet.core.jni.proto";

message SECP256K1TransferOutput {
    uint32 type_id = 1;            // 04 bytes
    uint64 amount = 2;            // 08 bytes
    uint64 locktime = 3;          // 08 bytes
    uint32 threshold = 4;         // 04 bytes
    repeated bytes addresses = 5; // 04 bytes + 20 bytes * len(addresses)
}

message TransactionOutput {
    oneof output {
        SECP256K1TransferOutput secp_transfer_output = 1;
    }
}

message SECP256K1TransferInput {
    uint32 type_id = 1;                   // 04 bytes
    uint64 amount = 2;                   // 08 bytes
    repeated uint32 address_indices = 3; // 04 bytes + 04 bytes * len(address_indices)
}

message TransactionInput {
    oneof input {
        SECP256K1TransferInput secp_transfer_input = 1;
    }
}

message TransferableOutput {
    bytes asset_id = 1; // 32 bytes
    TransactionOutput output = 2;  // size(output)
}

message TransferableInput {
    bytes tx_id = 1;       // 32 bytes
    uint32 utxo_index = 2; // 04 bytes
    bytes asset_id = 3;    // 32 bytes
    TransactionInput input = 4;       // size(input)
    repeated bytes spendable_addresses = 5; // not encoded. represented as pubkeys.
}

message BaseTx {
    uint32 type_id = 1;           // 04 bytes
    uint32 network_id = 2;       // 04 bytes
    bytes blockchain_id = 3;     // 32 bytes
    repeated TransferableOutput outputs = 4; // 04 bytes + size(outs)
    repeated TransferableInput inputs = 5;   // 04 bytes + size(ins)
    bytes memo = 6;              // 04 bytes + size(memo)
}

message SigningInput {
    repeated bytes private_keys = 1;
    oneof tx_oneof {
        BaseTx base_tx = 2;
    }
}

// Transaction signing output.
message SigningOutput {
    // Signed and encoded transaction bytes.
    bytes encoded = 1;
}
