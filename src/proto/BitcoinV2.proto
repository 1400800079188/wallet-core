syntax = "proto3";

package TW.BitcoinV2.Proto;
option java_package = "wallet.core.jni.proto";

import "Common.proto";

message SigningInput {
    // The protocol version, is currently expected to be 1 or 2 (BIP68)
    int32 version = 1;

    // Block height or timestamp indicating at what point transactions can be
    // included in a block.
    oneof lock_time {
        uint32 blocks = 2;
        uint32 seconds = 3;
    }

	SelectorType input_selector = 4;

	repeated Input inputs = 5;

    repeated Output outputs = 6;

	uint64 sat_vb = 7;

	bool create_change = 8;
}

enum SelectorType {
	UseAll = 0;
	AutomaticAscending = 1;
}

message Input {
	bytes txid = 1;

	uint32 vout = 3;

	uint64 amount = 2;

	oneof variant {
		InputVariant builder = 4;
		ScriptWitness custom = 5;
		TaprootScriptPath taproot_script = 6;
	}

	enum InputVariant {
		P2sh = 0;
		P2Pkh = 1;
		P2Wsh = 2;
		P2Wpkh = 3;
		P2TrKeyPath = 4;
	}

	message ScriptWitness {
		bytes script_sig = 1;
		repeated bytes witness_items = 2;
	}

	message TaprootScriptPath {
		bytes payload = 5;
		bytes control_block = 6;
	}
}

message Output {
	uint64 amount = 1;

	oneof to_recipient {
		bytes script_pubkey = 2;
		Builder builder = 3;
		bytes from_address = 4;
	}
}

message Builder {
	oneof type {
		// Pay-to-Script-Hash, specify the hash.
		bytes p2sh = 1;
		// Pay-to-Public-Key-Hash
		ToPublicKeyOrHash p2pkh = 3;
		// Pay-to-Witness-Script-Hash, specify the hash.
		bytes p2wsh = 4;
		// Pay-to-Public-Key-Hash
		ToPublicKeyOrHash wp2pkh = 6;
		// Pay-to-Taproot-key-path (balance transfers), specify the public key.
		bytes p2tr_key_path = 7;
		// Pay-to-Taproot-script-path (complex transfers)
		TaprootScriptPath p2tr_script_path = 8;
	}

	message ToPublicKeyOrHash {
		oneof to_address {
			bytes key = 1;
			bytes hash = 2;
		}
	}

	message TaprootScriptPath {
		bytes public_key = 1;
		bytes leaf_hash = 2;
	}
}

message SigningOutput {
	Transaction transaction = 1;

	// The encoded transaction that submitted to the network.
	bytes encoded = 2;

	bytes transaction_id = 3;

    uint32 error = 4;

	uint64 fee = 5;
}

message Transaction {
    // The protocol version, is currently expected to be 1 or 2 (BIP68)
    int32 version = 1;

    uint32 lock_time = 2;

	// The transaction inputs.
	repeated TransactionInput inputs = 3;
	
	// The transaction outputs.
	repeated TransactionOutput outputs = 4;
}

message TransactionInput {
	// The referenced input by transaction hash.
	bytes txid = 1;

	// The referenced input by transaction index.
	uint32 vout = 3;

	uint32 sequence = 4;

	// The script for claiming the input (non-Segwit/non-Taproot).
	bytes script_sig = 5;

	// The script for claiming the input (Segit/Taproot).
	repeated bytes witness_items = 6;
}

message TransactionOutput {
	// Public key or hash.
	bytes recipient = 1;

	// The condition for claiming the output.
	bytes script_pubkey = 2;

	// The amount sent.
	uint64 amount = 3;

	// In case of P2TR script-path (complex scripts), this is the control block
	// required for claiming.
	ControlBlock control_block = 4;

	message ControlBlock {
		bytes raw = 1;
	}
}
